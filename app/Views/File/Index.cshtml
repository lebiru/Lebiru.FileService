@using Lebiru.FileService.Models
@model List<FileInfo>

@{
    ViewData["Title"] = "Dashboard";
    Layout = "_Layout";
    var expiryOptions = (ExpiryOption[])ViewBag.ExpiryOptions;
}

<!DOCTYPE html>
<html>

<head>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <title>Dashboard</title>
    <style>
        body {
            background-color: white;
            color: black;
        }

        /* Dark Mode */
        body.dark-mode {
            background-color: #121212;
            color: white;
        }

        .settings-container {
            background-color: inherit;
            color: inherit;
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        table {
            border-collapse: collapse;
            width: 100%;
            table-layout: fixed;
        }

        th,
        td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        th {
            position: sticky;
            top: 0;
            z-index: 1;
            background-color: #f8f9fa;  /* Light theme header background */
            box-shadow: 0 1px 0 0 #dddddd;  /* Adds a bottom border that stays with the sticky header */
            padding: 12px 8px;  /* Slightly increased padding */
        }

        /* Dark mode header styles */
        body.dark-mode th {
            background-color: #2d2d2d;  /* Dark theme header background */
            box-shadow: 0 1px 0 0 #444444;  /* Darker border for dark mode */
        }

        img {
            max-width: 95px;
            max-height: 55px;
        }

        .pagination-container {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            margin-top: 20px;
        }

        .pagination {
            display: flex;
        }

        .pagination button {
            margin: 0 5px;
        }

        .page-number {
            font-size: 25px;
        }

        .max-file-size-info {
            margin: 5px 0;
            color: #666;
        }

        .dark-mode .max-file-size-info {
            color: #aaa;
        }

        .search-bar {
            width: 100%;
            padding: 15px;
            margin: 10px 0px;
            border: 1px solid cornflowerblue;
            border-radius: 5px;
        }

        .button {
            margin: 10px 0px;
            display: block;
            width: 225px;
            height: 35px;
        }

        .button-pagination {
            padding: 15px;
            border: 1px solid #b6b6b6;
            border-radius: 5px;
            width: 100px;
            color: black;
        }

        .empty-message {
            text-align: center;
            color: grey;
            margin: 25px;
        }

        /* removed .table-container to prevent inner scrolling on file list */

        /* Zoomed image container */
        .zoom-container {
            display: none;
            position: fixed;
            z-index: 9999;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: inherit;
        }

        /* Zoomed image */
        .zoom-image {
            display: block;
            margin: auto;
            margin-top: 10%;
            max-width: 80%;
            max-height: 80%;
        }

        .preview-cell {
            cursor: pointer;
        }

        .primary-bar-container {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 32px;
            margin-bottom: 20px;
        }

        .info-cards {
            display: flex;
            gap: 16px;
            flex-wrap: wrap;
            width: 100%;
            margin-bottom: 20px;
        }

        .server-info-container, .file-count-container, .doc-count-container {
            font-size: 14px;
            padding: 16px;
            background: var(--bg-accent, white);
            border-radius: 6px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            min-width: 200px;
            flex: 1;
            margin-right: 20px;
        }

        .dark-mode .server-info-container,
        .dark-mode .file-count-container,
        .dark-mode .doc-count-container {
            --bg-accent: #1e1e1e;
        }

        .card-title {
            color: var(--text-secondary, #666);
            font-size: 13px;
            font-weight: 500;
            margin-bottom: 8px;
        }

        .file-count {
            font-size: 28px;
            font-weight: 600;
            margin-top: 4px;
        }

        .metrics-list {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .metric-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .metric-label {
            color: var(--text-secondary, #666);
            font-size: 13px;
        }

        .metric-value {
            font-size: 16px;
            font-weight: 600;
        }

        .dark-mode .metric-label {
            color: var(--text-secondary, #999);
        }

        .dark-mode .card-title {
            --text-secondary: #999;
        }

        .memory-usage {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .progress-bar-container {
            display: flex;
            align-items: center;
            gap: 10px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, system-ui;
        }

        .progress-bar {
            flex-grow: 1;
            height: 6px;
            background: var(--progress-bg, #e9ecef);
            border-radius: 3px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: var(--progress-fill, #0d6efd);
            border-radius: 3px;
            transition: width 0.3s ease, background-color 0.3s ease;
        }

        .progress-fill.warning {
            background: var(--progress-warning, #ffc107);
        }

        .progress-fill.critical {
            background: var(--progress-critical, #dc3545);
        }

        .progress-text {
            font-size: 13px;
            color: var(--text-secondary);
            white-space: nowrap;
        }

        body.dark-mode .progress-bar {
            --progress-bg: #2d2d2d;
        }

        body.dark-mode .progress-fill {
            --progress-fill: #0d6efd;
            --progress-warning: #ffc107;
            --progress-critical: #dc3545;
        }

        body.dark-mode .progress-text {
            --text-secondary: #a0a0a0;
        }

        #uploadForm {
            cursor: pointer;
        }

        #files {
            cursor: pointer;
        }

        #upload-button {
            cursor: pointer;
        }

        .expiry-select {
            margin: 10px 0;
        }

        .expiry-select select {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            width: 225px;
            font-size: 14px;
        }

        .expiry-select label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .fileRow {
            height: 75px;
        }

        button#delete-all-files-button {
            background-color: red;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            margin: 10px 0;
            line-height: 5px;
        }

        button#delete-all-files-button:hover {
            background-color: darkred;
        }

        .action-link {
            display: inline-block;
            padding: 4px 8px;
            text-decoration: none;
            color: inherit;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .action-link:hover {
            background-color: rgba(0, 0, 0, 0.05);
            text-decoration: none;
            color: inherit;
        }

        .dark-mode .action-link:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .delete-link {
            color: #dc3545;
        }

        .dark-mode .delete-link {
            color: #ff4d4d;
        }

        /* Sort controls aligned top-right above the table */
        .file-list-controls {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: 8px;
            margin: 8px 0 6px 0;
        }

        .sort-select {
            background-color: inherit;
            color: inherit;
            border: 1px solid rgba(0, 0, 0, 0.2);
            border-radius: 4px;
            padding: 6px 10px;
            font-size: 14px;
            min-width: 220px;
        }

        .sort-select-label{
            margin-top: 10px;
        }

        body.dark-mode .sort-select {
            background-color: #2d2d2d;
            border-color: rgba(255, 255, 255, 0.2);
            color: white;
        }
    </style>
</head>

<body class="@((ViewBag.IsDarkMode ? "dark-mode" : ""))">
    <h2 style="margin: 15px auto;">Dashboard</h2>

    <div class="primary-bar-container">
        <!-- Removed upload form since we have a dedicated upload page -->
        <div class="info-cards">
            <div class="server-info-container">
                <div class="card-title">Storage Usage</div>
                <div class="memory-usage">
                @{
                    // Parse the bytes values from ViewBag strings
                    var usedSpaceStr = ViewBag.UsedSpace.ToString();
                    var totalSpaceStr = ViewBag.TotalSpace.ToString();
                    
                    // Helper function to convert to bytes
                    long ParseToBytes(string str)
                    {
                        var parts = str.Split(' ');
                        var value = double.Parse(parts[0]);
                        var unit = parts[1];
                        var units = new[] { "B", "KB", "MB", "GB", "TB" };
                        var idx = Array.IndexOf(units, unit);
                        var bytes = value;
                        for (var i = 0; i < idx; i++)
                        {
                            bytes *= 1024;
                        }
                        return (long)bytes;
                    }
                    
                    // Convert both values to bytes
                    var usedBytes = ParseToBytes(usedSpaceStr);
                    var totalBytes = ParseToBytes(totalSpaceStr);
                    
                    // Calculate percentage
                    var percentage = ((double)usedBytes / totalBytes) * 100;
                    
                    // Determine the progress bar class based on thresholds
                    var fillClass = "progress-fill";
                    if (percentage >= ViewBag.CriticalThresholdPercent)
                    {
                        fillClass += " critical";
                    }
                    else if (percentage >= ViewBag.WarningThresholdPercent)
                    {
                        fillClass += " warning";
                    }
                }
                <div style="font-family: monospace; white-space: pre;">
                    <div class="progress-bar-container" title="Warning at @ViewBag.WarningThresholdPercent%, Critical at @ViewBag.CriticalThresholdPercent%">
                        <div class="progress-bar">
                            <div class="@fillClass" style="width: @percentage.ToString("F2")%"></div>
                        </div>
                        <span class="progress-text">@percentage.ToString("F2")%</span>
                    </div>
                    <div class="progress-text" title="Maximum allowed space: @ViewBag.TotalSpace">@ViewBag.UsedSpace of @ViewBag.TotalSpace</div>
            </div>
            </div>
            </div>
            <div class="server-info-container doc-count-container">
                <div class="card-title">Total Files</div>
                <div class="file-count">@ViewBag.FileCount</div>
            </div>
            <div class="server-info-container api-metrics-container">
                <div class="card-title">API Metrics</div>
                <div class="metrics-list">
                    <div class="metric-item">
                        <span class="metric-label">Uploads:</span>
                        <span class="metric-value">@ViewBag.UploadCount</span>
                    </div>
                    <div class="metric-item">
                        <span class="metric-label">Downloads:</span>
                        <span class="metric-value">@ViewBag.DownloadCount</span>
                    </div>
                    <div class="metric-item">
                        <span class="metric-label">Deletions:</span>
                        <span class="metric-value">@ViewBag.DeleteCount</span>
                    </div>
                    <div class="metric-item last-updated">
                        <span class="metric-timestamp">Last Updated: @ViewBag.MetricsLastUpdated.ToLocalTime().ToString("MMM dd, yyyy HH:mm:ss")</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        .metric-timestamp {
            color: #888;
            font-size: 0.85em;
            font-style: italic;
            margin-top: 8px;
            display: block;
        }

        body.dark-mode .metric-timestamp {
            color: #aaa;
        }

        .last-updated {
            margin-top: 10px;
            border-top: 1px solid #eee;
            padding-top: 8px;
        }

        body.dark-mode .last-updated {
            border-top-color: #444;
        }
    </style>

    <!-- Search bar -->
    <input type="text" id="searchInput" class="search-bar" placeholder="Search files...">


    <div style="text-align:left;">
        <form id="form-download-button" method="post" action="DownloadZip">
            <button style="display: block;" type="button" id="download-button" class="button"
                onclick="downloadFiles()">Download Selected File(s)</button>
            <input type="hidden" id="filenames" name="filenames" value="" />
        </form>
        <div style="text-align:left;">
            @if (User.IsInRole(UserRoles.Admin))
            {
                <button type="button" id="delete-all-files-button" class="button"
                    style="background-color: red; color: white;" onclick="confirmCleanup()">Delete All Files</button>
            }
        </div>
    </div>

    <!-- Sort controls (top-right, above the table) -->
    <div class="file-list-controls">
        <label class="sort-select-label" for="sortSelect">Sort:</label>
        <select id="sortSelect" class="sort-select">
            <option value="upload_desc">Upload Date (Newest First)</option>
            <option value="upload_asc">Upload Date (Oldest First)</option>
            <option value="name_asc">FileName (A-Z)</option>
            <option value="name_desc">FileName (Z-A)</option>
            <option value="size_desc">Size (Largest to Smallest)</option>
            <option value="size_asc">Size (Smallest to Largest)</option>
            <option value="expiry_asc">Expiry Time (Soonest to Latest)</option>
            <option value="expiry_desc">Expiry Time (Latest to Soonest)</option>
        </select>
    </div>

    <div id="fileList" data-current-sort="@ViewBag.Sort">
        @await Html.PartialAsync("_FileList", Model)
    </div>

    <!-- Zoomed image container -->
    <div class="zoom-container" onclick="closeZoom()">
        <span class="close-zoom">&times;</span>
        <img src="" alt="Zoomed Image" class="zoom-image">
    </div>

    @if (Model.Any())
    {
        @await Html.PartialAsync("_Pagination", ViewBag.Pagination as PaginationModel)
    }

    <script>

        var currentPage = 1;
        var itemsPerPage = 5;
        var currentSort = (document.getElementById('fileList')?.dataset.currentSort) || 'upload_desc';
        var totalPages = 1;
        var totalItems = 0;

        function loadPage(page) {
            const sort = currentSort;
            fetch('/File/List?page=' + page + '&itemsPerPage=' + itemsPerPage + '&sort=' + encodeURIComponent(sort))
                .then(response => response.text())
                .then(html => {
                    document.getElementById('fileList').innerHTML = html;
                    currentPage = page;
                    updatePaginationDisplay();
                })
                .catch(error => console.error('Error loading page:', error));
        }

        // Initialize sort select and handle changes
        (function(){
            const sortSelect = document.getElementById('sortSelect');
            if (sortSelect) {
                // Set initial value
                sortSelect.value = currentSort;
                sortSelect.addEventListener('change', function(){
                    currentSort = this.value;
                    const list = document.getElementById('fileList');
                    if (list) list.dataset.currentSort = currentSort;
                    loadPage(1);
                });
            }
        })();

        function goToPage(page) {
            if (page >= 1 && page <= totalPages) {
                loadPage(page);
            }
        }

        function goToFirstPage() {
            if (currentPage > 1) {
                loadPage(1);
            }
        }

        function goToLastPage() {
            if (currentPage < totalPages) {
                loadPage(totalPages);
            }
        }

        function prevPage() {
            if (currentPage > 1) {
                loadPage(currentPage - 1);
            }
        }

        function nextPage() {
            if (currentPage < totalPages) {
                loadPage(currentPage + 1);
            }
        }

        function changeItemsPerPage(select) {
            itemsPerPage = parseInt(select.value);
            calculateTotalPages();
            loadPage(1);
        }

        function updatePaginationDisplay() {
            document.querySelectorAll('.page-first, .page-prev').forEach(btn => 
                btn.disabled = currentPage === 1
            );
            document.querySelectorAll('.page-next, .page-last').forEach(btn => 
                btn.disabled = currentPage === totalPages
            );
            document.getElementById('itemsPerPage').value = itemsPerPage;
            document.getElementById('currentPage').textContent = currentPage;
            document.getElementById('totalPages').textContent = totalPages;

            // Update the "Showing X-Y of Z items" text
            const itemsInfoEl = document.querySelector('.items-info');
            if (itemsInfoEl) {
                if (totalItems === 0) {
                    itemsInfoEl.textContent = 'Showing 0-0 of 0 items';
                } else {
                    const start = ((currentPage - 1) * itemsPerPage) + 1;
                    const end = Math.min(currentPage * itemsPerPage, totalItems);
                    itemsInfoEl.textContent = `Showing ${start}-${end} of ${totalItems} items`;
                }
            }
        }

        function calculateTotalPages() {
            fetch('/File/GetTotalFiles')
                .then(response => response.json())
                .then(total => {
                    totalItems = parseInt(total, 10) || 0;
                    totalPages = Math.max(1, Math.ceil(totalItems / itemsPerPage));
                    updatePaginationDisplay();
                })
                .catch(error => console.error('Error calculating total pages:', error));
        }

        document.addEventListener('DOMContentLoaded', function() {
            calculateTotalPages();
            loadPage(1);
            showDownloadFilesButton(); // on init determine if should show download files button
        });

        // Upload function removed - now using dedicated Upload page

        // Get the input element and add an event listener for input events
        document.getElementById("searchInput").addEventListener("input", function () {
            // Get the value of the search input
            var searchValue = this.value.trim().toLowerCase();

            // Get all file rows in the table
            var fileRows = document.getElementsByClassName("fileRow");

            // Loop through all file rows and show/hide them based on search input
            for (var i = 0; i < fileRows.length; i++) {
                var fileName = fileRows[i].getElementsByTagName("td")[1].innerText.toLowerCase();

                // Check if the file name contains the search input
                if (fileName.includes(searchValue)) {
                    fileRows[i].style.display = "";
                } else {
                    fileRows[i].style.display = "none";
                }
            }
        });

        // Get all preview cells
        var previewCells = document.querySelectorAll('.preview-cell');

        // Add click event listener to each preview cell
        previewCells.forEach(function (cell) {
            cell.addEventListener('click', function () {
                // Get the image source from the clicked cell
                var imageUrl = this.querySelector('.preview-image').src;

                // Set the image source in the zoom container
                var zoomImage = document.querySelector('.zoom-image');
                zoomImage.src = imageUrl;

                // Show the zoom container
                document.querySelector('.zoom-container').style.display = 'block';
            });
        });

        // Function to close the zoomed image
        function closeZoom() {
            document.querySelector('.zoom-container').style.display = 'none';
        }

        // enable or disable download-button if no checkbox is checked
        function showDownloadFilesButton() {
            var checkboxes = document.querySelectorAll('input[type="checkbox"]');
            var downloadButton = document.getElementById('download-button');
            var anyCheckboxChecked = false;

            checkboxes.forEach(function (checkbox) {
                if (checkbox.checked) {
                    anyCheckboxChecked = true;
                    return;
                }
            });

            if (anyCheckboxChecked) {
                $(downloadButton).prop("disabled", false);
            } else {
                $(downloadButton).prop("disabled", true);
            }
        }

        // Filter selected files from every checkbox and send pipe-separated list of filenames to the endpoint
        // to download the selected files
        function downloadFiles() {
            const checkboxes = document.querySelectorAll('input[type="checkbox"]');
            let selectedFiles = [];

            checkboxes.forEach(function (checkbox) {
                if (checkbox.checked) {
                    let fileIndex = checkbox.id.split('-')[2];

                    let fileName = document.getElementById('selected-file-' + fileIndex).innerText;

                    selectedFiles.push(fileName);
                }
            });

            if (selectedFiles.length > 0) {
                const form = document.getElementById("form-download-button");
                const hidden = document.getElementById("filenames");

                hidden.value = selectedFiles.join('|');

                form.submit();

                hidden.value = "";

            }
        }

        function confirmCleanup() {
            if (confirm("Are you sure you want to delete all files? This action cannot be undone.")) {
                fetch("/File/TriggerCleanup", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            alert("Cleanup job has been enqueued successfully!");
                            // Wait for the job to complete before reloading
                            setTimeout(() => window.location.reload(), 3000);
                        } else {
                            alert("An error occurred while trying to enqueue the cleanup job.");
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("An error occurred while trying to enqueue the cleanup job.");
                    });
            }
        }

        function deleteFile(filename) {
            if (confirm(`Are you sure you want to delete "${filename}"? This action cannot be undone.`)) {
                const formData = new FormData();
                formData.append('filename', filename);

                fetch("/File/DeleteFile", {
                    method: "POST",
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
                        window.location.reload(); // Reload to update file list and disk usage
                    } else {
                        response.text().then(text => {
                            alert("Error deleting file: " + text);
                        });
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    alert("An error occurred while trying to delete the file.");
                });
            }
        }
        
        function refreshCurrentPage() {
            // Get current page from URL params or default to 1
            const urlParams = new URLSearchParams(window.location.search);
            let currentPage = parseInt(urlParams.get('page') || 1);
            let currentItemsPerPage = parseInt(urlParams.get('itemsPerPage') || 10);
            let currentSort = urlParams.get('sort') || 'upload_desc';
            
            // Fetch updated file list for current page
            fetch(`/File/List?page=${currentPage}&itemsPerPage=${currentItemsPerPage}&sort=${currentSort}`, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                document.querySelector('.file-list-container').innerHTML = html;
                
                // Also refresh server space info
                fetch('/File/AvailableSpace', {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    document.getElementById('used-space').textContent = data.usedSpace;
                    document.getElementById('total-space').textContent = data.totalSpace;
                    
                    // Update progress bar
                    const progressBar = document.querySelector('.progress-bar');
                    const percentage = data.usedSpacePercent;
                    progressBar.style.width = percentage + '%';
                    progressBar.setAttribute('aria-valuenow', percentage);
                    
                    // Update color based on thresholds
                    if (percentage >= data.criticalThresholdPercent) {
                        progressBar.classList.remove('bg-warning', 'bg-info');
                        progressBar.classList.add('bg-danger');
                    } else if (percentage >= data.warningThresholdPercent) {
                        progressBar.classList.remove('bg-danger', 'bg-info');
                        progressBar.classList.add('bg-warning');
                    } else {
                        progressBar.classList.remove('bg-danger', 'bg-warning');
                        progressBar.classList.add('bg-info');
                    }
                });
            });
        }

    </script>


</body>

</html>
