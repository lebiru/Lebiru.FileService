@using Lebiru.FileService.Models
@model List<FileInfo>

@{
    ViewData["Title"] = "Dashboard";
    Layout = "_Layout";
    var expiryOptions = (ExpiryOption[])ViewBag.ExpiryOptions;
}

<!DOCTYPE html>
<html>

<head>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <title>Dashboard</title>
    <style>
        body {
            background-color: white;
            color: black;
        }

        /* Dark Mode */
        body.dark-mode {
            background-color: #121212;
            color: white;
        }

        .table-container,
        .settings-container {
            background-color: inherit;
            color: inherit;
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        table {
            border-collapse: collapse;
            width: 100%;
            table-layout: fixed;
        }

        th,
        td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        th {
            position: sticky;
            top: 0;
            z-index: 1;
            background-color: #f8f9fa;  /* Light theme header background */
            box-shadow: 0 1px 0 0 #dddddd;  /* Adds a bottom border that stays with the sticky header */
            padding: 12px 8px;  /* Slightly increased padding */
        }

        /* Dark mode header styles */
        body.dark-mode th {
            background-color: #2d2d2d;  /* Dark theme header background */
            box-shadow: 0 1px 0 0 #444444;  /* Darker border for dark mode */
        }

        img {
            max-width: 100px;
            max-height: 100px;
        }

        .pagination-container {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            margin-top: 20px;
        }

        .pagination {
            display: flex;
        }

        .pagination button {
            margin: 0 5px;
        }

        .page-number {
            font-size: 25px;
        }

        .search-bar {
            width: 100%;
            padding: 15px;
            margin: 10px 0px;
            border: 1px solid cornflowerblue;
            border-radius: 5px;
        }

        .button {
            margin: 10px 0px;
            display: block;
            width: 225px;
            height: 35px;
        }

        .button-pagination {
            padding: 15px;
            border: 1px solid #b6b6b6;
            border-radius: 5px;
            width: 100px;
            color: black;
        }

        .empty-message {
            text-align: center;
            color: grey;
            margin: 25px;
        }

        .table-container {
            height: 450px;
            /* Set the desired height */
            overflow-y: auto;
            /* Add vertical scrollbar if content exceeds height */
        }

        /* Zoomed image container */
        .zoom-container {
            display: none;
            position: fixed;
            z-index: 9999;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: inherit;
        }

        /* Zoomed image */
        .zoom-image {
            display: block;
            margin: auto;
            margin-top: 10%;
            max-width: 80%;
            max-height: 80%;
        }

        .preview-cell {
            cursor: pointer;
        }

        .primary-bar-container {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 32px;
            margin-bottom: 20px;
        }

        .info-cards {
            display: flex;
            gap: 16px;
            flex-shrink: 0;
        }

        .server-info-container, .file-count-container, .doc-count-container {
            font-size: 14px;
            padding: 16px;
            background: var(--bg-accent, white);
            border-radius: 6px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            min-width: 200px;
        }

        .dark-mode .server-info-container,
        .dark-mode .file-count-container,
        .dark-mode .doc-count-container {
            --bg-accent: #1e1e1e;
        }

        .card-title {
            color: var(--text-secondary, #666);
            font-size: 13px;
            font-weight: 500;
            margin-bottom: 8px;
        }

        .file-count {
            font-size: 28px;
            font-weight: 600;
            margin-top: 4px;
        }

        .metrics-list {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .metric-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .metric-label {
            color: var(--text-secondary, #666);
            font-size: 13px;
        }

        .metric-value {
            font-size: 16px;
            font-weight: 600;
        }

        .dark-mode .metric-label {
            color: var(--text-secondary, #999);
        }

        .dark-mode .card-title {
            --text-secondary: #999;
        }

        .memory-usage {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .progress-bar-container {
            display: flex;
            align-items: center;
            gap: 10px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, system-ui;
        }

        .progress-bar {
            flex-grow: 1;
            height: 6px;
            background: var(--progress-bg, #e9ecef);
            border-radius: 3px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: var(--progress-fill, #0d6efd);
            border-radius: 3px;
            transition: width 0.3s ease;
        }

        .progress-text {
            font-size: 13px;
            color: var(--text-secondary);
            white-space: nowrap;
        }

        body.dark-mode .progress-bar {
            --progress-bg: #2d2d2d;
        }

        body.dark-mode .progress-fill {
            --progress-fill: #0d6efd;
        }

        body.dark-mode .progress-text {
            --text-secondary: #a0a0a0;
        }

        #uploadForm {
            cursor: pointer;
        }

        #files {
            cursor: pointer;
        }

        #upload-button {
            cursor: pointer;
        }

        .expiry-select {
            margin: 10px 0;
        }

        .expiry-select select {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            width: 225px;
            font-size: 14px;
        }

        .expiry-select label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .fileRow {
            height: 75px;
        }

        button#delete-all-files-button {
            background-color: red;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            margin: 10px 0;
            line-height: 5px;
        }

        button#delete-all-files-button:hover {
            background-color: darkred;
        }

        .action-link {
            display: inline-block;
            padding: 4px 8px;
            text-decoration: none;
            color: inherit;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .action-link:hover {
            background-color: rgba(0, 0, 0, 0.05);
            text-decoration: none;
            color: inherit;
        }

        .dark-mode .action-link:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .delete-link {
            color: #dc3545;
        }

        .dark-mode .delete-link {
            color: #ff4d4d;
        }
    </style>
</head>

<body class="@((ViewBag.IsDarkMode ? "dark-mode" : ""))">
    <h2 style="margin: 15px auto;">Dashboard</h2>

    <div class="primary-bar-container">
        <form id="uploadForm" enctype="multipart/form-data">
            <input type="file" name="files" id="files" class="button" multiple>
            <div class="expiry-select">
                <label for="expiryOption">File Expiry:</label>
                <select name="expiryOption" id="expiryOption" class="form-control">
                    @foreach (var option in expiryOptions)
                    {
                        var field = option.GetType().GetField(option.ToString());
                        var displayAttr = field?.GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.DisplayAttribute), false)
                            .Cast<System.ComponentModel.DataAnnotations.DisplayAttribute>()
                            .FirstOrDefault();
                        var displayName = displayAttr?.Name ?? option.ToString();
                        <option value="@((int)option)">@displayName</option>
                    }
                </select>
            </div>
            <button type="button" id="upload-button" class="button" onclick="uploadFiles()">Upload File(s)</button>
        </form>
        <div class="info-cards">
            <div class="server-info-container">
                <div class="card-title">Storage Usage</div>
                <div class="memory-usage">
                @{
                    // Parse the bytes values from ViewBag strings
                    var usedSpaceStr = ViewBag.UsedSpace.ToString();
                    var totalSpaceStr = ViewBag.TotalSpace.ToString();                // Extract numeric values (assuming format like "21.7 MB")
                var usedValue = double.Parse(usedSpaceStr.Split(' ')[0]);
                var usedUnit = usedSpaceStr.Split(' ')[1];
                var totalValue = double.Parse(totalSpaceStr.Split(' ')[0]);
                var totalUnit = totalSpaceStr.Split(' ')[1];
                
                // Convert to same unit if different
                if (usedUnit != totalUnit)
                {
                    // Simple conversion - this could be more sophisticated
                    var units = new[] { "B", "KB", "MB", "GB", "TB" };
                    var usedIdx = Array.IndexOf(units, usedUnit);
                    var totalIdx = Array.IndexOf(units, totalUnit);
                    while (usedIdx < totalIdx)
                    {
                        usedValue /= 1024;
                        usedIdx++;
                    }
                    while (totalIdx < usedIdx)
                    {
                        totalValue /= 1024;
                        totalIdx++;
                    }
                }
                
                // Calculate percentage
                var percentage = (usedValue / totalValue) * 100;
                
                // Create ASCII progress bar (50 chars wide)
                const int width = 50;
                var filledChars = (int)Math.Round((percentage / 100) * width);
                var progressBar = "[" + new string('█', filledChars) + new string('░', width - filledChars) + "]";
            }
            <div style="font-family: monospace; white-space: pre;">
                <div class="progress-bar-container">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: @percentage.ToString("F2")%"></div>
                    </div>
                    <span class="progress-text">@percentage.ToString("F2")%</span>
                </div>
                <div class="progress-text">@ViewBag.UsedSpace of @ViewBag.TotalSpace</div>
            </div>
            </div>
            </div>
            <div class="server-info-container doc-count-container">
                <div class="card-title">Total Files</div>
                <div class="file-count">@ViewBag.FileCount</div>
            </div>
            <div class="server-info-container api-metrics-container">
                <div class="card-title">API Metrics</div>
                <div class="metrics-list">
                    <div class="metric-item">
                        <span class="metric-label">Uploads:</span>
                        <span class="metric-value">@ViewBag.UploadCount</span>
                    </div>
                    <div class="metric-item">
                        <span class="metric-label">Downloads:</span>
                        <span class="metric-value">@ViewBag.DownloadCount</span>
                    </div>
                    <div class="metric-item">
                        <span class="metric-label">Deletions:</span>
                        <span class="metric-value">@ViewBag.DeleteCount</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search bar -->
    <input type="text" id="searchInput" class="search-bar" placeholder="Search files...">


    <div style="text-align:left;">
        <form id="form-download-button" method="post" action="DownloadZip">
            <button style="display: block;" type="button" id="download-button" class="button"
                onclick="downloadFiles()">Download Selected File(s)</button>
            <input type="hidden" id="filenames" name="filenames" value="" />
        </form>
        <div style="text-align:left;">
            <button type="button" id="delete-all-files-button" class="button"
                style="background-color: red; color: white;" onclick="confirmCleanup()">Delete All Files</button>
        </div>
    </div>

    <div class="table-container">
        <table>
            <tr>
                <th>Select</th>
                <th>File Name</th>
                <th>Size</th>
                <th>Upload Time</th>
                <th>Expiry Time</th>
                <th>Server Name</th>
                <th>Preview</th>
                <th>Actions</th>
            </tr>
            @if (Model.Count > 0)
            {
                int itemIndex = 0;

                @foreach (var file in Model)
                {
                    var extension = System.IO.Path.GetExtension(file.FileName).ToLower();
                    var isImage = extension == ".png" || extension == ".jpg" || extension == ".jpeg" || extension == ".gif" ||
                    extension == ".bmp";

                    <tr class="fileRow">

                        <td><input type="checkbox" id="@("chk-file-" + itemIndex.ToString())"
                                onchange="showDownloadFilesButton()"></td>

                        <td id="@("selected-file-" + itemIndex.ToString())">@file.FileName</td>

                        <td>@{
                            var size = file.FileSize;
                            string[] units = { "B", "KB", "MB", "GB", "TB" };
                            int unitIndex = 0;
                            while (size >= 1024 && unitIndex < units.Length - 1)
                            {
                                size /= 1024;
                                unitIndex++;
                            }
                            @($"{size:F2} {units[unitIndex]}")
                        }</td>

                        <td>@file.UploadTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>
                            @if (file.ExpiryTime.HasValue)
                            {
                                var timeLeft = file.ExpiryTime.Value - DateTime.UtcNow;
                                var expiryText = timeLeft.TotalSeconds < 0 ? "Expired" :
                                    timeLeft.TotalDays > 1 ? $"{Math.Floor(timeLeft.TotalDays)} days left" :
                                    timeLeft.TotalHours > 1 ? $"{Math.Floor(timeLeft.TotalHours)} hours left" :
                                    timeLeft.TotalMinutes > 1 ? $"{Math.Floor(timeLeft.TotalMinutes)} minutes left" :
                                    "Less than a minute left";
                                <span title="@file.ExpiryTime.Value.ToString("yyyy-MM-dd HH:mm:ss UTC")">@expiryText</span>
                            }
                            else
                            {
                                <span>Never</span>
                            }
                        </td>
                        <td>@Environment.MachineName</td>
                        @if (isImage)
                        {
                            <td class="preview-cell">
                                <img src="@Url.Action("ViewFile", "File", new { filename = file.FileName })" alt="Image Preview"
                                    class="preview-image" />
                            </td>
                        }
                        else
                        {
                            <td>N/A</td>
                        }
                        <td>
                            <a href="@Url.Action("ViewFile", "File", new { filename = file.FileName })" target="_blank" class="action-link">📄 View
                                File</a>
                            <br />
                            <a href="@Url.Action("DownloadFile", "File", new { filename = file.FileName })" class="action-link">⬇️ Download</a>
                            <br />
                            <a href="#" onclick="deleteFile('@file.FileName'); return false;" class="action-link delete-link">🗑️ Delete</a>
                        </td>
                    </tr>

                    itemIndex++;
                }
            }
            else
            {
                <tr>
                    <td colspan="8">
                        <p class="empty-message">No files uploaded yet...</p>
                    </td>
                </tr>
            }
        </table>
    </div>

    <!-- Zoomed image container -->
    <div class="zoom-container" onclick="closeZoom()">
        <span class="close-zoom">&times;</span>
        <img src="" alt="Zoomed Image" class="zoom-image">
    </div>

    <!-- Pagination -->
    <div class="pagination-container">
        <div class="pagination">
            <button class="button-pagination" onclick="prevPage()">Previous</button>
            <button class="button-pagination" onclick="nextPage()">Next</button>
        </div>
        <div class="page-number">
            Page <span id="currentPage"></span> of <span id="totalPage"></span>
        </div>
    </div>

    <script>

        var currentPage = 0;
        var pageSize = 5;

        function showPage(page, numPages) {
            var start = page * pageSize;
            var end = start + pageSize;
            $('.fileRow').hide().slice(start, end).show();
            $('#currentPage').text(page + 1); // Display page number (1-based index)
            if (numPages == 0) {
                numPages = 1;
            }
            $('#totalPage').text(numPages);
        }

        function prevPage() {
            var numPages = Math.ceil($('.fileRow').length / pageSize);
            if (currentPage > 0) {
                currentPage--;
                showPage(currentPage, numPages);
            }
        }

        function nextPage() {
            var numPages = Math.ceil($('.fileRow').length / pageSize);
            if (currentPage < numPages - 1) {
                currentPage++;
                showPage(currentPage, numPages);
            }
        }

        $(document).ready(function () {
            var numPages = Math.ceil($('.fileRow').length / pageSize);
            showPage(currentPage, numPages);
            showDownloadFilesButton(); // on init determine if should show download files button
        });

        function uploadFiles() {
            var input = document.getElementById("files");
            if (!input.files || input.files.length === 0) {
                alert("Please select at least one file to upload.");
                return;
            }

            var formData = new FormData();

            // Append each selected file to the FormData object
            for (var i = 0; i < input.files.length; i++) {
                formData.append("files", input.files[i]);
            }

            // Add the expiry option
            var expirySelect = document.getElementById("expiryOption");
            formData.append("expiryOption", expirySelect.value);

            var uploadButton = document.getElementById("upload-button");
            uploadButton.disabled = true;
            uploadButton.textContent = "Uploading...";

            fetch("/File/CreateDoc", {
                method: "POST",
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text) });
                }
                return response.text();
            })
            .then(result => {
                console.log("Upload successful:", result);
                setTimeout(() => window.location.reload(), 500);
            })
            .catch(error => {
                console.error("Upload failed:", error);
                alert("Upload failed: " + error.message);
            })
            .finally(() => {
                uploadButton.disabled = false;
                uploadButton.textContent = "Upload File(s)";
                input.value = ""; // Clear the file input
            });
        }

        // Get the input element and add an event listener for input events
        document.getElementById("searchInput").addEventListener("input", function () {
            // Get the value of the search input
            var searchValue = this.value.trim().toLowerCase();

            // Get all file rows in the table
            var fileRows = document.getElementsByClassName("fileRow");

            // Loop through all file rows and show/hide them based on search input
            for (var i = 0; i < fileRows.length; i++) {
                var fileName = fileRows[i].getElementsByTagName("td")[1].innerText.toLowerCase();

                // Check if the file name contains the search input
                if (fileName.includes(searchValue)) {
                    fileRows[i].style.display = "";
                } else {
                    fileRows[i].style.display = "none";
                }
            }
        });

        // Get all preview cells
        var previewCells = document.querySelectorAll('.preview-cell');

        // Add click event listener to each preview cell
        previewCells.forEach(function (cell) {
            cell.addEventListener('click', function () {
                // Get the image source from the clicked cell
                var imageUrl = this.querySelector('.preview-image').src;

                // Set the image source in the zoom container
                var zoomImage = document.querySelector('.zoom-image');
                zoomImage.src = imageUrl;

                // Show the zoom container
                document.querySelector('.zoom-container').style.display = 'block';
            });
        });

        // Function to close the zoomed image
        function closeZoom() {
            document.querySelector('.zoom-container').style.display = 'none';
        }

        // enable or disable download-button if no checkbox is checked
        function showDownloadFilesButton() {
            var checkboxes = document.querySelectorAll('input[type="checkbox"]');
            var downloadButton = document.getElementById('download-button');
            var anyCheckboxChecked = false;

            checkboxes.forEach(function (checkbox) {
                if (checkbox.checked) {
                    anyCheckboxChecked = true;
                    return;
                }
            });

            if (anyCheckboxChecked) {
                $(downloadButton).prop("disabled", false);
            } else {
                $(downloadButton).prop("disabled", true);
            }
        }

        // Filter selected files from every checkbox and send pipe-separated list of filenames to the endpoint
        // to download the selected files
        function downloadFiles() {
            const checkboxes = document.querySelectorAll('input[type="checkbox"]');
            let selectedFiles = [];

            checkboxes.forEach(function (checkbox) {
                if (checkbox.checked) {
                    let fileIndex = checkbox.id.split('-')[2];

                    let fileName = document.getElementById('selected-file-' + fileIndex).innerText;

                    selectedFiles.push(fileName);
                }
            });

            if (selectedFiles.length > 0) {
                const form = document.getElementById("form-download-button");
                const hidden = document.getElementById("filenames");

                hidden.value = selectedFiles.join('|');

                form.submit();

                hidden.value = "";

            }
        }

        function confirmCleanup() {
            if (confirm("Are you sure you want to delete all files? This action cannot be undone.")) {
                fetch("/File/TriggerCleanup", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            alert("Cleanup job has been enqueued successfully!");
                            window.location.reload();
                        } else {
                            alert("An error occurred while trying to enqueue the cleanup job.");
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("An error occurred while trying to enqueue the cleanup job.");
                    });
            }
        }

        function deleteFile(filename) {
            if (confirm(`Are you sure you want to delete "${filename}"? This action cannot be undone.`)) {
                const formData = new FormData();
                formData.append('filename', filename);

                fetch("/File/DeleteFile", {
                    method: "POST",
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
                        window.location.reload(); // Reload to update file list and disk usage
                    } else {
                        response.text().then(text => {
                            alert("Error deleting file: " + text);
                        });
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    alert("An error occurred while trying to delete the file.");
                });
            }
        }

    </script>


</body>

</html>
