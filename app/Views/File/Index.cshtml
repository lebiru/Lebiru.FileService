@using Lebiru.FileService.Models
@model List<FileInfo>

@{
    ViewData["Title"] = "Dashboard";
    Layout = "_Layout";
    var expiryOptions = (ExpiryOption[])ViewBag.ExpiryOptions;
}

<!DOCTYPE html>
<html>

<head>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <title>Dashboard</title>
    <style>
        body {
            background-color: white;
            color: black;
        }

        /* Dark Mode */
        body.dark-mode {
            background-color: #121212;
            color: white;
        }

        .settings-container {
            background-color: inherit;
            color: inherit;
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        table {
            border-collapse: collapse;
            width: 100%;
            table-layout: fixed;
        }

        th,
        td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        th {
            position: sticky;
            top: 0;
            z-index: 1;
            background-color: #f8f9fa;  /* Light theme header background */
            box-shadow: 0 1px 0 0 #dddddd;  /* Adds a bottom border that stays with the sticky header */
            padding: 12px 8px;  /* Slightly increased padding */
        }

        /* Dark mode header styles */
        body.dark-mode th {
            background-color: #2d2d2d;  /* Dark theme header background */
            box-shadow: 0 1px 0 0 #444444;  /* Darker border for dark mode */
        }

        img {
            max-width: 95px;
            max-height: 55px;
        }

        #searchInput {
            height: 50px;
            border: 1px solid royalblue;
        }

        .pagination-container {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            margin-top: 20px;
        }

        .pagination {
            display: flex;
        }

        .pagination button {
            margin: 0 5px;
        }

        .page-number {
            font-size: 25px;
        }

        .max-file-size-info {
            margin: 5px 0;
            color: #666;
        }

        .dark-mode .max-file-size-info {
            color: #aaa;
        }

        /* Search bar moved to _Layout.cshtml */

        /* Button styling updated to use Bootstrap classes */

        .button-pagination {
            padding: 15px;
            border: 1px solid #b6b6b6;
            border-radius: 5px;
            width: 100px;
            color: black;
        }

        .empty-message {
            text-align: center;
            color: grey;
            margin: 25px;
        }

        /* removed .table-container to prevent inner scrolling on file list */

        /* Zoomed image container */
        .zoom-container {
            display: none;
            position: fixed;
            z-index: 9999;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: inherit;
        }

        /* Zoomed image */
        .zoom-image {
            display: block;
            margin: auto;
            margin-top: 10%;
            max-width: 80%;
            max-height: 80%;
        }

        .preview-cell {
            cursor: pointer;
        }
        
        /* Notification styles */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 4px;
            background-color: #f8f9fa;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            z-index: 9999;
            opacity: 0;
            transform: translateY(-20px);
            transition: opacity 0.3s, transform 0.3s;
        }
        
        .notification.show {
            opacity: 1;
            transform: translateY(0);
        }
        
        .notification-content {
            display: flex;
            align-items: center;
        }
        
        .notification-content i {
            margin-right: 10px;
        }
        
        .notification-success {
            background-color: #d4edda;
            border-left: 4px solid #28a745;
            color: #155724;
        }
        
        .notification-info {
            background-color: #d1ecf1;
            border-left: 4px solid #17a2b8;
            color: #0c5460;
        }
        
        .notification-warning {
            background-color: #fff3cd;
            border-left: 4px solid #ffc107;
            color: #856404;
        }
        
        .notification-error {
            background-color: #f8d7da;
            border-left: 4px solid #dc3545;
            color: #721c24;
        }
        
        body.dark-mode .notification {
            background-color: #343a40;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }
        
        body.dark-mode .notification-success {
            background-color: #1e4a30;
            color: #d4edda;
        }
        
        body.dark-mode .notification-info {
            background-color: #1a4957;
            color: #d1ecf1;
        }
        
        body.dark-mode .notification-warning {
            background-color: #533f03;
            color: #fff3cd;
        }
        
        body.dark-mode .notification-error {
            background-color: #501217;
            color: #f8d7da;
        }

        .primary-bar-container {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 32px;
            margin-bottom: 20px;
        }

        .info-cards {
            display: flex;
            gap: 16px;
            flex-wrap: wrap;
            width: 100%;
            margin-bottom: 20px;
        }

        .server-info-container, .file-count-container, .doc-count-container {
            font-size: 14px;
            padding: 10px;
            background: var(--bg-accent, white);
            border-radius: 6px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            min-width: 200px;
            flex: 1;
            margin-right: 20px;
        }

        .dark-mode .server-info-container,
        .dark-mode .file-count-container,
        .dark-mode .doc-count-container {
            --bg-accent: #1e1e1e;
        }

        .card-title {
            color: var(--text-secondary, #666);
            font-size: 13px;
            font-weight: 500;
            margin-bottom: 8px;
        }

        .file-count {
            font-size: 28px;
            font-weight: 600;
            margin-top: 4px;
        }

        .metrics-list {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .metric-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .metric-label {
            color: var(--text-secondary, #666);
            font-size: 13px;
        }

        .metric-value {
            font-size: 16px;
            font-weight: 600;
        }

        .dark-mode .metric-label {
            color: var(--text-secondary, #999);
        }

        .dark-mode .card-title {
            --text-secondary: #999;
        }

        .memory-usage {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .progress-bar-container {
            display: flex;
            align-items: center;
            gap: 10px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, system-ui;
        }

        .progress-bar {
            flex-grow: 1;
            height: 6px;
            background: var(--progress-bg, #e9ecef);
            border-radius: 3px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: var(--progress-fill, #0d6efd);
            border-radius: 3px;
            transition: width 0.3s ease, background-color 0.3s ease;
        }

        .progress-fill.warning {
            background: var(--progress-warning, #ffc107);
        }

        .progress-fill.critical {
            background: var(--progress-critical, #dc3545);
        }

        .progress-text {
            font-size: 13px;
            color: var(--text-secondary);
            white-space: nowrap;
        }

        body.dark-mode .progress-bar {
            --progress-bg: #2d2d2d;
        }

        body.dark-mode .progress-fill {
            --progress-fill: #0d6efd;
            --progress-warning: #ffc107;
            --progress-critical: #dc3545;
        }

        body.dark-mode .progress-text {
            --text-secondary: #a0a0a0;
        }

        #uploadForm {
            cursor: pointer;
        }

        #files {
            cursor: pointer;
        }

        #upload-button {
            cursor: pointer;
        }

        .expiry-select {
            margin: 10px 0;
        }

        .expiry-select select {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            width: 225px;
            font-size: 14px;
        }

        .expiry-select label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .fileRow {
            height: 75px;
        }

        /* Button styling updated to use Bootstrap classes */

        .action-link {
            display: inline-block;
            padding: 4px 8px;
            text-decoration: none;
            color: inherit;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .action-link:hover {
            background-color: rgba(0, 0, 0, 0.05);
            text-decoration: none;
            color: inherit;
        }

        .dark-mode .action-link:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .delete-link {
            color: #dc3545;
        }

        .dark-mode .delete-link {
            color: #ff4d4d;
        }

        /* Sort controls aligned top-right above the table */
        .file-list-controls {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: 8px;
            margin: 8px 0 6px 0;
        }

        .sort-select {
            background-color: inherit;
            color: inherit;
            border: 1px solid rgba(0, 0, 0, 0.2);
            border-radius: 4px;
            padding: 6px 10px;
            font-size: 14px;
            min-width: 220px;
        }

        .sort-select-label{
            margin-top: 10px;
        }

        body.dark-mode .sort-select {
            background-color: #2d2d2d;
            border-color: rgba(255, 255, 255, 0.2);
            color: white;
        }
    </style>
</head>

<body class="@((ViewBag.IsDarkMode ? "dark-mode" : ""))">
    <h2 style="margin: 15px auto;">Dashboard</h2>

    <div class="primary-bar-container">
        <!-- Removed upload form since we have a dedicated upload page -->
        <div class="info-cards">
            <div class="server-info-container">
                <div class="card-title">Storage Usage</div>
                <div class="memory-usage">
                @{
                    // Parse the bytes values from ViewBag strings
                    var usedSpaceStr = ViewBag.UsedSpace.ToString();
                    var totalSpaceStr = ViewBag.TotalSpace.ToString();
                    
                    // Helper function to convert to bytes
                    long ParseToBytes(string str)
                    {
                        var parts = str.Split(' ');
                        var value = double.Parse(parts[0]);
                        var unit = parts[1];
                        var units = new[] { "B", "KB", "MB", "GB", "TB" };
                        var idx = Array.IndexOf(units, unit);
                        var bytes = value;
                        for (var i = 0; i < idx; i++)
                        {
                            bytes *= 1024;
                        }
                        return (long)bytes;
                    }
                    
                    // Convert both values to bytes
                    var usedBytes = ParseToBytes(usedSpaceStr);
                    var totalBytes = ParseToBytes(totalSpaceStr);
                    
                    // Calculate percentage
                    var percentage = ((double)usedBytes / totalBytes) * 100;
                    
                    // Determine the progress bar class based on thresholds
                    var fillClass = "progress-fill";
                    if (percentage >= ViewBag.CriticalThresholdPercent)
                    {
                        fillClass += " critical";
                    }
                    else if (percentage >= ViewBag.WarningThresholdPercent)
                    {
                        fillClass += " warning";
                    }
                }
                <div style="font-family: monospace; white-space: pre;">
                    <div class="progress-bar-container" title="Warning at @ViewBag.WarningThresholdPercent%, Critical at @ViewBag.CriticalThresholdPercent%">
                        <div class="progress-bar">
                            <div class="@fillClass" style="width: @percentage.ToString("F2")%"></div>
                        </div>
                        <span class="progress-text">@percentage.ToString("F2")%</span>
                    </div>
                    <div class="progress-text" title="Maximum allowed space: @ViewBag.TotalSpace">@ViewBag.UsedSpace of @ViewBag.TotalSpace</div>
            </div>
            </div>
            </div>
            <div class="server-info-container doc-count-container">
                <div class="card-title">Total Files</div>
                <div class="file-count">@ViewBag.FileCount</div>
            </div>
            <div class="server-info-container api-metrics-container">
                <div class="card-title">API Metrics</div>
                <div class="metrics-list">
                    <div class="metric-item">
                        <span class="metric-label">Uploads:</span>
                        <span class="metric-value">@ViewBag.UploadCount</span>
                    </div>
                    <div class="metric-item">
                        <span class="metric-label">Downloads:</span>
                        <span class="metric-value">@ViewBag.DownloadCount</span>
                    </div>
                    <div class="metric-item">
                        <span class="metric-label">Deletions:</span>
                        <span class="metric-value">@ViewBag.DeleteCount</span>
                    </div>
                    <div class="metric-item last-updated">
                        <span class="metric-timestamp">Last Updated: @ViewBag.MetricsLastUpdated.ToLocalTime().ToString("MMM dd, yyyy HH:mm:ss")</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        .metric-timestamp {
            color: #888;
            font-size: 0.85em;
            font-style: italic;
            margin-top: 8px;
            display: block;
        }

        body.dark-mode .metric-timestamp {
            color: #aaa;
        }

        .last-updated {
            margin-top: 10px;
            border-top: 1px solid #eee;
            padding-top: 8px;
        }

        body.dark-mode .last-updated {
            border-top-color: #444;
        }
    </style>

    <!-- Search bar with improved look and feel -->
    <div class="input-group mb-3" style="max-width: 100%;">
        <div class="input-group-prepend">
            <span class="input-group-text"><i class="fas fa-search"></i></span>
        </div>
        <input type="text" id="searchInput" class="form-control" placeholder="Search files..." 
               aria-label="Search files">
    </div>

    <div style="text-align:left; display: flex; gap: 15px; align-items: center; margin-bottom: 15px;">
        <form id="form-download-button" method="post" action="DownloadZip">
            <button type="button" id="download-button" class="btn btn-primary" 
                onclick="downloadFiles()" disabled>
                <i class="fas fa-download mr-1"></i> Download Selected
            </button>
            <input type="hidden" id="filenames" name="filenames" value="" />
        </form>
        @if (User.IsInRole(UserRoles.Admin))
        {
            <button type="button" id="delete-all-files-button" class="btn btn-danger"
                data-toggle="modal" data-target="#deleteAllModal">
                <i class="fas fa-trash-alt mr-1"></i> Delete All Files
            </button>
        }
    </div>

    <!-- Sort controls (top-right, above the table) -->
    <div class="file-list-controls">
        <label class="sort-select-label" for="sortSelect">Sort:</label>
        <select id="sortSelect" class="sort-select">
            <option value="upload_desc">Upload Date (Newest First)</option>
            <option value="upload_asc">Upload Date (Oldest First)</option>
            <option value="name_asc">FileName (A-Z)</option>
            <option value="name_desc">FileName (Z-A)</option>
            <option value="size_desc">Size (Largest to Smallest)</option>
            <option value="size_asc">Size (Smallest to Largest)</option>
            <option value="expiry_asc">Expiry Time (Soonest to Latest)</option>
            <option value="expiry_desc">Expiry Time (Latest to Soonest)</option>
        </select>
    </div>

    <div id="fileList" data-current-sort="@ViewBag.Sort">
        @await Html.PartialAsync("_FileList", Model)
    </div>

    <!-- Zoomed image container -->
    <div class="zoom-container" onclick="closeZoom()">
        <span class="close-zoom">&times;</span>
        <img src="" alt="Zoomed Image" class="zoom-image">
    </div>

    @if (Model.Any())
    {
        @await Html.PartialAsync("_Pagination", ViewBag.Pagination as PaginationModel)
    }

    <script>
        console.log("Document still loading, waiting for DOMContentLoaded");
        
        document.addEventListener('DOMContentLoaded', function() {
            console.log("DOM fully loaded, initializing date formatting");
            
            // The delete all files button now uses Bootstrap's data-toggle="modal" 
            // and data-target="#deleteAllModal" instead of direct event handler
        });

        // Initialize with values from server-side (set from session)
        var currentPage = @(((PaginationModel)ViewBag.Pagination).CurrentPage);
        var itemsPerPage = @(((PaginationModel)ViewBag.Pagination).PageSize);
        var totalItems = @(((PaginationModel)ViewBag.Pagination).TotalItems);
        var totalPages = @(((PaginationModel)ViewBag.Pagination).TotalPages);
        var currentSort = (document.getElementById('fileList')?.dataset.currentSort) || '@ViewBag.Sort';

        function loadPage(page) {
            const sort = currentSort;
            fetch('/File/List?page=' + page + '&itemsPerPage=' + itemsPerPage + '&sort=' + encodeURIComponent(sort))
                .then(response => response.text())
                .then(html => {
                    const fileList = document.getElementById('fileList');
                    if (fileList) {
                        fileList.innerHTML = html;
                    }
                    currentPage = page;
                    updatePaginationDisplay();
                    
                    // Setup checkbox listeners for the newly loaded content
                    setupCheckboxListeners();
                    
                    // Update browser history without page reload so back/forward work
                    const url = new URL(window.location.href);
                    url.searchParams.set('page', page);
                    url.searchParams.set('itemsPerPage', itemsPerPage);
                    url.searchParams.set('sort', sort);
                    window.history.replaceState({ page, itemsPerPage, sort }, '', url);
                    
                    // Make an additional call to ensure session is updated with current page
                    fetch('/File/UpdateSession', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({ page: page, itemsPerPage: itemsPerPage })
                    })
                    .then(response => response.json())
                    .then(data => console.log('Session updated:', data))
                    .catch(err => console.error('Error updating session:', err));
                })
                .catch(error => console.error('Error loading page:', error));
        }

        // Initialize sort select and handle changes
        (function(){
            const sortSelect = document.getElementById('sortSelect');
            if (sortSelect) {
                // Set initial value
                sortSelect.value = currentSort;
                sortSelect.addEventListener('change', function(){
                    currentSort = this.value;
                    const list = document.getElementById('fileList');
                    if (list) list.dataset.currentSort = currentSort;
                    loadPage(1);
                });
            }
        })();

        function goToPage(page) {
            if (page >= 1 && page <= totalPages) {
                loadPage(page);
            }
        }

        function goToFirstPage() {
            if (currentPage > 1) {
                loadPage(1);
            }
        }

        function goToLastPage() {
            if (currentPage < totalPages) {
                loadPage(totalPages);
            }
        }

        function prevPage() {
            if (currentPage > 1) {
                loadPage(currentPage - 1);
            }
        }

        function nextPage() {
            if (currentPage < totalPages) {
                loadPage(currentPage + 1);
            }
        }

        function changeItemsPerPage(select) {
            itemsPerPage = parseInt(select.value);
            calculateTotalPages();
            loadPage(1);
        }

        function updatePaginationDisplay() {
            // First check if pagination elements exist
            const prevButtons = document.querySelectorAll('.page-first, .page-prev');
            const nextButtons = document.querySelectorAll('.page-next, .page-last');
            const itemsPerPageSelect = document.getElementById('itemsPerPage');
            const currentPageSpan = document.getElementById('currentPage');
            const totalPagesSpan = document.getElementById('totalPages');
            const itemsInfoEl = document.querySelector('.items-info');
            
            // Update navigation button states if they exist
            if (prevButtons.length > 0) {
                prevButtons.forEach(btn => btn.disabled = currentPage === 1);
            }
            
            if (nextButtons.length > 0) {
                nextButtons.forEach(btn => btn.disabled = currentPage === totalPages);
            }
            
            // Update select and spans if they exist
            if (itemsPerPageSelect) {
                itemsPerPageSelect.value = itemsPerPage;
            }
            
            if (currentPageSpan) {
                currentPageSpan.textContent = currentPage;
            }
            
            if (totalPagesSpan) {
                totalPagesSpan.textContent = totalPages;
            }

            // Update the "Showing X-Y of Z items" text if it exists
            if (itemsInfoEl) {
                if (totalItems === 0) {
                    itemsInfoEl.textContent = 'Showing 0-0 of 0 items';
                } else {
                    const start = ((currentPage - 1) * itemsPerPage) + 1;
                    const end = Math.min(currentPage * itemsPerPage, totalItems);
                    itemsInfoEl.textContent = `Showing ${start}-${end} of ${totalItems} items`;
                }
            }
        }

        function calculateTotalPages() {
            fetch('/File/GetTotalFiles')
                .then(response => response.json())
                .then(total => {
                    totalItems = parseInt(total, 10) || 0;
                    totalPages = Math.max(1, Math.ceil(totalItems / itemsPerPage));
                    
                    // Only update pagination display if we're not in the middle of a page refresh
                    // This helps prevent errors when elements don't exist yet
                    if (document.readyState === 'complete') {
                        updatePaginationDisplay();
                    }
                })
                .catch(error => console.error('Error calculating total pages:', error));
        }

        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOMContentLoaded event fired, initializing pagination');
            
            try {
                // Default to server-provided values (from Razor variables)
                // These are already set at the top of the script
                
                // Check URL parameters and override if present
                const urlParams = new URLSearchParams(window.location.search);
                
                if (urlParams.has('page')) {
                    const urlPage = parseInt(urlParams.get('page'), 10);
                    if (!isNaN(urlPage) && urlPage > 0) {
                        currentPage = urlPage;
                        console.log('Using page from URL:', currentPage);
                    }
                }
                
                if (urlParams.has('itemsPerPage')) {
                    const urlItemsPerPage = parseInt(urlParams.get('itemsPerPage'), 10);
                    if (!isNaN(urlItemsPerPage) && urlItemsPerPage > 0) {
                        itemsPerPage = urlItemsPerPage;
                        console.log('Using items per page from URL:', itemsPerPage);
                    }
                }
                
                if (urlParams.has('sort')) {
                    currentSort = urlParams.get('sort');
                    console.log('Using sort from URL:', currentSort);
                    
                    // Update sort dropdown if it exists
                    const sortSelect = document.getElementById('sortSelect');
                    if (sortSelect) sortSelect.value = currentSort;
                }
                
                // Calculate total pages which will also update the pagination display
                calculateTotalPages();
                
                // Load the current page (whether from URL or session)
                console.log('Loading page:', currentPage);
                loadPage(currentPage);
                
                // Initialize the download button state
                showDownloadFilesButton();
                
                // Add event listeners to checkboxes for download button state
                setupCheckboxListeners();
                
                // Ensure session is updated with current values
                fetch('/File/UpdateSession', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ page: currentPage, itemsPerPage: itemsPerPage })
                })
                .then(response => response.json())
                .then(data => console.log('Session initialized on page load:', data))
                .catch(err => console.error('Error updating session on page load:', err));
            } catch (error) {
                console.error('Error in pagination initialization:', error);
            }
        });

        // Upload function removed - now using dedicated Upload page

        // Add search functionality when the document is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Get the input element and add an event listener for input events
            const searchInput = document.getElementById("searchInput");
            if (searchInput) {
                searchInput.addEventListener("input", function () {
                    // Get the value of the search input
                    var searchValue = this.value.trim().toLowerCase();
    
                    // Get all file rows in the table
                    var fileRows = document.getElementsByClassName("fileRow");
    
                    // Loop through all file rows and show/hide them based on search input
                    for (var i = 0; i < fileRows.length; i++) {
                        var fileName = fileRows[i].getElementsByTagName("td")[1].innerText.toLowerCase();
    
                        // Check if the file name contains the search input
                        if (fileName.includes(searchValue)) {
                            fileRows[i].style.display = "";
                        } else {
                            fileRows[i].style.display = "none";
                        }
                    }
                });
            }
        });

        // Initialize preview cells when document is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Get all preview cells
            var previewCells = document.querySelectorAll('.preview-cell');
    
            // Add click event listener to each preview cell
            previewCells.forEach(function (cell) {
                cell.addEventListener('click', function () {
                    // Get the image source from the clicked cell
                    var imageUrl = this.querySelector('.preview-image').src;
    
                    // Set the image source in the zoom container
                    var zoomImage = document.querySelector('.zoom-image');
                    if (zoomImage) {
                        zoomImage.src = imageUrl;
                        
                        // Show the zoom container
                        const zoomContainer = document.querySelector('.zoom-container');
                        if (zoomContainer) {
                            zoomContainer.style.display = 'block';
                        }
                    }
                });
            });
        });

        // Function to close the zoomed image
        function closeZoom() {
            document.querySelector('.zoom-container').style.display = 'none';
        }

        // enable or disable download-button if no checkbox is checked
        function showDownloadFilesButton() {
            var checkboxes = document.querySelectorAll('input[type="checkbox"]');
            var downloadButton = document.getElementById('download-button');
            
            if (!downloadButton) {
                return; // Exit if the button doesn't exist
            }
            
            var anyCheckboxChecked = false;

            checkboxes.forEach(function (checkbox) {
                if (checkbox.checked) {
                    anyCheckboxChecked = true;
                    return;
                }
            });

            // Disable button if no checkboxes are checked
            downloadButton.disabled = !anyCheckboxChecked;
            
            // Also update visual appearance based on disabled state
            if (!anyCheckboxChecked) {
                downloadButton.classList.add('disabled');
            } else {
                downloadButton.classList.remove('disabled');
            }
        }

        // Filter selected files from every checkbox and send pipe-separated list of filenames to the endpoint
        // to download the selected files
        function downloadFiles() {
            const checkboxes = document.querySelectorAll('input[type="checkbox"]');
            let selectedFiles = [];

            checkboxes.forEach(function (checkbox) {
                if (checkbox.checked) {
                    let fileIndex = checkbox.id.split('-')[2];

                    let fileName = document.getElementById('selected-file-' + fileIndex).innerText;

                    selectedFiles.push(fileName);
                }
            });

            if (selectedFiles.length > 0) {
                const form = document.getElementById("form-download-button");
                const hidden = document.getElementById("filenames");

                hidden.value = selectedFiles.join('|');

                form.submit();

                hidden.value = "";

            }
        }

        // Modal is now created directly in the HTML structure using Bootstrap
        // The confirmCleanup and closeDeleteAllModal functions are no longer needed since we use Bootstrap's modal system
        
        // Register event handler for confirm delete all button
        document.addEventListener('DOMContentLoaded', function() {
            const confirmDeleteBtn = document.getElementById('confirm-delete-all');
            if (confirmDeleteBtn) {
                confirmDeleteBtn.addEventListener('click', executeDeleteAll);
            }
        });
        
        function executeDeleteAll() {
            // Close modal first using Bootstrap's modal API
            $('#deleteAllModal').modal('hide');
            
            // Trigger cleanup
            fetch("/File/TriggerCleanup", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            })
                .then(response => {
                    if (response.ok) {
                        showNotification("Cleanup job has been enqueued successfully!", "success");
                        // Wait for the job to complete before reloading
                        setTimeout(() => window.location.reload(), 3000);
                    } else {
                        showNotification("An error occurred while trying to enqueue the cleanup job.", "error");
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    showNotification("An error occurred while trying to enqueue the cleanup job.", "error");
                });
        }
        
        function showNotification(message, type = 'info') {
            // Create notification element if it doesn't exist
            let notification = document.getElementById('notification');
            if (!notification) {
                notification = document.createElement('div');
                notification.id = 'notification';
                notification.className = 'notification';
                document.body.appendChild(notification);
            }
            
            // Set notification content and style
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <div class="notification-content">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;
            
            // Show notification
            notification.classList.add('show');
            
            // Hide after 3 seconds
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }

        function deleteFile(filename) {
            if (confirm(`Are you sure you want to delete "${filename}"? This action cannot be undone.`)) {
                const formData = new FormData();
                formData.append('filename', filename);

                fetch("/File/DeleteFile", {
                    method: "POST",
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
                        window.location.reload(); // Reload to update file list and disk usage
                    } else {
                        response.text().then(text => {
                            alert("Error deleting file: " + text);
                        });
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    alert("An error occurred while trying to delete the file.");
                });
            }
        }
        
        // Setup checkbox event listeners for the download button state
        function setupCheckboxListeners() {
            // Find all checkboxes in the file list
            const checkboxes = document.querySelectorAll('input[type="checkbox"]');
            
            // Add change event listener to each checkbox
            checkboxes.forEach(function(checkbox) {
                checkbox.addEventListener('change', function() {
                    // Update download button state whenever a checkbox changes
                    showDownloadFilesButton();
                });
            });
            
            // Initial state check
            showDownloadFilesButton();
        }
        
        function refreshCurrentPage() {
            // Use current values that are already initialized from session
            // Only use URL params if explicitly provided
            const urlParams = new URLSearchParams(window.location.search);
            
            // If URL explicitly specifies values, use them
            if (urlParams.has('page')) {
                currentPage = parseInt(urlParams.get('page'));
            }
            if (urlParams.has('itemsPerPage')) {
                itemsPerPage = parseInt(urlParams.get('itemsPerPage'));
            }
            if (urlParams.has('sort')) {
                currentSort = urlParams.get('sort');
            }
            
            // Fetch updated file list for current page
            fetch(`/File/List?page=${currentPage}&itemsPerPage=${itemsPerPage}&sort=${currentSort}`, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                document.querySelector('.file-list-container').innerHTML = html;
                
                // Also refresh server space info
                fetch('/File/AvailableSpace', {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    document.getElementById('used-space').textContent = data.usedSpace;
                    document.getElementById('total-space').textContent = data.totalSpace;
                    
                    // Update progress bar
                    const progressBar = document.querySelector('.progress-bar');
                    const percentage = data.usedSpacePercent;
                    progressBar.style.width = percentage + '%';
                    progressBar.setAttribute('aria-valuenow', percentage);
                    
                    // Update color based on thresholds
                    if (percentage >= data.criticalThresholdPercent) {
                        progressBar.classList.remove('bg-warning', 'bg-info');
                        progressBar.classList.add('bg-danger');
                    } else if (percentage >= data.warningThresholdPercent) {
                        progressBar.classList.remove('bg-danger', 'bg-info');
                        progressBar.classList.add('bg-warning');
                    } else {
                        progressBar.classList.remove('bg-danger', 'bg-warning');
                        progressBar.classList.add('bg-info');
                    }
                });
            });
        }

    </script>

    <!-- Delete All Files Modal -->
    <div class="modal fade" id="deleteAllModal" tabindex="-1" role="dialog" aria-labelledby="deleteAllModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteAllModalLabel">Delete All Files</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete all files? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        <i class="fas fa-times-circle"></i> No, Cancel
                    </button>
                    <button type="button" class="btn btn-danger" id="confirm-delete-all">
                        <i class="fas fa-trash-alt"></i> Yes, Delete All Files
                    </button>
                </div>
            </div>
        </div>
    </div>

</body>

</html>
