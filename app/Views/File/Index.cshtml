@model List<(string FileName, DateTime UploadTime)>

@{
    ViewData["Title"] = "Dashboard";
    Layout = "_Layout";
}

<!DOCTYPE html>
<html>
<head>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <title>Dashboard</title>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
        }

        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        th {
            background-color: #f2f2f2;
        }

        img {
            max-width: 100px;
            max-height: 100px;
        }

        .pagination-container {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            margin-top: 20px;
        }

        .pagination {
            display: flex;
        }

            .pagination button {
                margin: 0 5px;
            }

        .page-number {
            font-size: 25px;
        }

        .search-bar {
            width: 100%;
            padding: 15px;
            margin: 10px 0px;
            border: 1px solid cornflowerblue;
            border-radius: 5px;
        }

        .button {
            margin: 10px 0px;
            display: block;
            width: 225px;
            height: 35px;
        }

        .button-pagination {
            padding: 15px;
            border: 1px solid #b6b6b6;
            border-radius: 5px;
            width: 100px;
            color: black;
        }

        .empty-message {
            text-align: center;
            color: grey;
            margin: 25px;
        }

        .table-container {
            height: 450px; /* Set the desired height */
            overflow-y: auto; /* Add vertical scrollbar if content exceeds height */
        }

        /* Zoomed image container */
        .zoom-container {
            display: none;
            position: fixed;
            z-index: 9999;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.9);
        }
        /* Zoomed image */
        .zoom-image {
            display: block;
            margin: auto;
            margin-top: 10%;
            max-width: 80%;
            max-height: 80%;
        }

        .preview-cell {
            cursor: pointer;
        }

        .primary-bar-container {
            display: flex;
        }

        .server-info-container {
            margin: 0px auto;
            font-size: 25px;
            padding: 2px;
        }

        #uploadForm {
            cursor: pointer;
        }

        #files {
            cursor: pointer;
        }

        #upload-button {
            cursor: pointer;
        }

        .fileRow {
            height: 75px;
        }

    </style>
</head>
<body>
    <h2 style="margin: 15px auto;">Dashboard</h2>

    <div class="primary-bar-container"
        <form id="uploadForm" enctype="multipart/form-data">
            <input type="file" name="files" id="files" class="button" multiple>
            <button type="button" id="upload-button" class="button" onclick="uploadFiles()">Upload File(s)</button>

        </form>
        <div class="server-info-container">
            <p>Using @ViewBag.UsedSpace of @ViewBag.TotalSpace memory</p>
        </div>
    </div>

    <!-- Search bar -->
    <input type="text" id="searchInput" class="search-bar" placeholder="Search files...">


    <div style="text-align:left;">
        <form id="form-download-button" method="post" action="DownloadZip">
            <button style="display:none;" type="button" id="download-button" class="button" onclick="downloadFiles()">Download Selected File(s)</button>
            <input type="hidden" id="filenames" name="filenames" value="" />
        </form>
    </div>

    <div class="table-container">
        <table>
            <tr>
                <th>Select</th>
                <th>File Name</th>
                <th>Upload Time</th>
                <th>Server Name</th>
                <th>Preview</th>
                <th>Action</th>
            </tr>
            @if (Model.Count > 0)
            {
                int itemIndex = 0;

                @foreach (var file in Model)
                {
                    var extension = System.IO.Path.GetExtension(file.FileName).ToLower();
                    var isImage = extension == ".png" || extension == ".jpg" || extension == ".jpeg" || extension == ".gif" || extension == ".bmp";

                    <tr class="fileRow">

                        <td><input type="checkbox" id="@("chk-file-" + itemIndex.ToString())" onchange="showDownloadFilesButton()"></td>

                        <td id="@("selected-file-" + itemIndex.ToString())">@file.FileName</td>


                        <td>@file.UploadTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@Environment.MachineName</td>
                        @if (isImage)
                        {
                            <td class="preview-cell">
                                <img src="@Url.Action("DownloadFile", "File", new { filename = file.FileName })" alt="Image Preview" class="preview-image" />
                            </td>
                        }
                        else
                        {
                            <td>N/A</td>
                        }
                        <td><a href="@Url.Action("DownloadFile", "File", new { filename = file.FileName })">Download</a></td>
                    </tr>

                    itemIndex++;
                }
            }
            else
            {
                <tr>
                    <td colspan="5">
                        <p class="empty-message">No files uploaded yet...</p>
                    </td>
                </tr>
            }
        </table>
    </div>

    <!-- Zoomed image container -->
    <div class="zoom-container" onclick="closeZoom()">
        <span class="close-zoom">&times;</span>
        <img src="" alt="Zoomed Image" class="zoom-image">
    </div>

    <!-- Pagination -->
    <div class="pagination-container">
        <div class="pagination">
            <button class="button-pagination" onclick="prevPage()">Previous</button>
            <button class="button-pagination" onclick="nextPage()">Next</button>
        </div>
        <div class="page-number">
            Page <span id="currentPage"></span> of <span id="totalPage"></span>
        </div>
    </div>

    <script>

        var currentPage = 0;
        var pageSize = 5;

        function showPage(page, numPages) {
            var start = page * pageSize;
            var end = start + pageSize;
            $('.fileRow').hide().slice(start, end).show();
            $('#currentPage').text(page + 1); // Display page number (1-based index)
            if (numPages == 0) {
                numPages = 1;
            }
            $('#totalPage').text(numPages);
        }

        function prevPage() {
            var numPages = Math.ceil($('.fileRow').length / pageSize);
            if (currentPage > 0) {
                currentPage--;
                showPage(currentPage, numPages);
            }
        }

        function nextPage() {
            var numPages = Math.ceil($('.fileRow').length / pageSize);
            if (currentPage < numPages - 1) {
                currentPage++;
                showPage(currentPage, numPages);
            }
        }

        $(document).ready(function () {
            var numPages = Math.ceil($('.fileRow').length / pageSize);
            showPage(currentPage, numPages);
        });

        function uploadFiles() {
            var input = document.getElementById("files");
            var formData = new FormData();

            // Append each selected file to the FormData object
            for (var i = 0; i < input.files.length; i++) {
                formData.append("files", input.files[i]);
            }

            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/File/CreateDoc", true);
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    // Redirect to the Home page after successful upload
                    window.location.href = "/File/Home";
                }
            };
            xhr.send(formData);
        }

        // Get the input element and add an event listener for input events
        document.getElementById("searchInput").addEventListener("input", function () {
            // Get the value of the search input
            var searchValue = this.value.trim().toLowerCase();

            // Get all file rows in the table
            var fileRows = document.getElementsByClassName("fileRow");

            // Loop through all file rows and show/hide them based on search input
            for (var i = 0; i < fileRows.length; i++) {
                var fileName = fileRows[i].getElementsByTagName("td")[0].innerText.toLowerCase();

                // Check if the file name contains the search input
                if (fileName.includes(searchValue)) {
                    fileRows[i].style.display = "";
                } else {
                    fileRows[i].style.display = "none";
                }
            }
        });

        // Get all preview cells
        var previewCells = document.querySelectorAll('.preview-cell');

        // Add click event listener to each preview cell
        previewCells.forEach(function (cell) {
            cell.addEventListener('click', function () {
                // Get the image source from the clicked cell
                var imageUrl = this.querySelector('.preview-image').src;

                // Set the image source in the zoom container
                var zoomImage = document.querySelector('.zoom-image');
                zoomImage.src = imageUrl;

                // Show the zoom container
                document.querySelector('.zoom-container').style.display = 'block';
            });
        });

        // Function to close the zoomed image
        function closeZoom() {
            document.querySelector('.zoom-container').style.display = 'none';
        }

        // Show or hide download-button if no checkbox is checked
        function showDownloadFilesButton() {
            var checkboxes = document.querySelectorAll('input[type="checkbox"]');
            var downloadButton = document.getElementById('download-button');
            var anyCheckboxChecked = false;

            checkboxes.forEach(function (checkbox) {
                if (checkbox.checked) {
                    anyCheckboxChecked = true;
                    return;
                }
            });

            if (anyCheckboxChecked) {
                downloadButton.style.display = 'block';
            } else {
                downloadButton.style.display = 'none';
            }
        }

        // Filter selected files from every checkbox and send pipe-separated list of filenames to the endpoint
        // to download the selected files
        function downloadFiles() {
            const checkboxes = document.querySelectorAll('input[type="checkbox"]');
            let selectedFiles = [];

            checkboxes.forEach(function (checkbox) {
                if (checkbox.checked) {
                    let fileIndex = checkbox.id.split('-')[2];

                    let fileName = document.getElementById('selected-file-' + fileIndex).innerText;

                    selectedFiles.push(fileName);
                }
            });

            if (selectedFiles.length > 0) {
                const form = document.getElementById("form-download-button");
                const hidden = document.getElementById("filenames");

                hidden.value = selectedFiles.join('|');

                form.submit();

                hidden.value = "";

            }
        }

    </script>


</body>
</html>
