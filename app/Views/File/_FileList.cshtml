@using Lebiru.FileService.Models
@model List<FileInfo>

@functions {
    public string GetFileIcon(string extension)
    {
        if (string.IsNullOrEmpty(extension)) return "fas fa-file"; // Default icon
        
        switch(extension.ToLower())
        {
            // Images
            case ".jpg":
            case ".jpeg":
            case ".png":
            case ".gif":
            case ".bmp":
            case ".svg":
            case ".webp":
                return "far fa-file-image";
                
            // Documents
            case ".pdf":
                return "far fa-file-pdf";
            case ".doc":
            case ".docx":
                return "far fa-file-word";
            case ".xls":
            case ".xlsx":
            case ".csv":
                return "far fa-file-excel";
            case ".ppt":
            case ".pptx":
                return "far fa-file-powerpoint";
            case ".txt":
                return "far fa-file-alt";
                
            // Archives
            case ".zip":
            case ".rar":
            case ".7z":
            case ".tar":
            case ".gz":
                return "far fa-file-archive";
                
            // Code
            case ".html":
            case ".htm":
                return "far fa-file-code";
            case ".js":
                return "fab fa-js";
            case ".css":
                return "fab fa-css3";
            case ".cs":
            case ".vb":
            case ".java":
            case ".py":
            case ".cpp":
            case ".c":
            case ".php":
                return "far fa-file-code";
                
            // Audio/Video
            case ".mp3":
            case ".wav":
            case ".ogg":
                return "far fa-file-audio";
            case ".mp4":
            case ".avi":
            case ".mov":
            case ".wmv":
            case ".mkv":
                return "far fa-file-video";
                
            // Default
            default:
                return "fas fa-file";
        }
    }
}

<style>
    .file-list {
        /* Let the list grow with content; no inner scrollbar */
        border: 1px solid #dddddd;
        border-radius: 4px;
    }
    
    .filename-content i {
        margin-right: 8px;
    }

    .file-table {
        border-collapse: collapse;
        width: 100%;
        table-layout: fixed;
    }

    .file-table th,
    .file-table td {
        padding: 8px;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
        position: relative;
        border: 1px solid #dddddd;
    }

    .file-table thead {
        position: sticky;
        top: 0;
        z-index: 2;
    }

    .file-table th {
        font-weight: 600;
        text-align: left;
        background-color: #f8f9fa;
        position: sticky;
        top: 0;
        z-index: 2;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border-bottom: 2px solid #dddddd;
    }

    body.dark-mode .file-table th {
        background-color: #2d2d2d;
        border-color: #444;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .file-table tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    body.dark-mode .file-table tr:nth-child(even) {
        background-color: #2a2a2a;
    }

    .file-table tr:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }

    body.dark-mode .file-table tr:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }

    /* Column widths */
    .col-select { 
        width: 40px; 
    }

    .col-select input[type="checkbox"]{
        margin-left: 5px;
    }

    .col-size { width: 100px; }
    .col-filename { 
        width: auto;
        position: relative;
        max-width: 300px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    
    /* Filename hover effects */
    .col-filename:hover {
        overflow: hidden;
        z-index: 5;
    }
    
    .col-filename:hover .filename-content {
        background-color: inherit;
        position: relative;
        width: auto;
        max-width: none;
        white-space: nowrap;
        animation: filename-marquee 8s linear infinite alternate;
        animation-play-state: running;
        transition: all 0.2s ease;
    }
    
    body.dark-mode .col-filename:hover .filename-content {
        box-shadow: 0 2px 5px rgba(0,0,0,0.5);
        background-color: #2a2a2a;
    }
    
    .filename-content {
        display: block;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        width: 100%;
        padding: 0;
        margin: 0;
    }
    
    @@keyframes filename-marquee {
        0%, 15% {
            transform: translateX(0);
        }
        85%, 100% {
            transform: translateX(calc(max(-100% + 280px, -150px)));
        }
    }
    
    .col-time { 
        width: 200px; /* Increased width to accommodate timezone */
    }
    .col-time .text-muted {
        font-size: 80%;
        opacity: 0.7;
    }
    .col-expiry { width: 120px; }
    .col-server { width: 120px; }
    .col-owner { width: 120px; }
    .col-preview { width: 110px; }
    .col-actions { width: 120px; }

    .action-dropdown {
        position: relative;
        display: inline-block;
        width: 100%;
    }

    .action-button {
        width: 100%;
        padding: 8px 12px;
        background-color: transparent;
        border: 1px solid #ddd;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: space-between;
        color: inherit;
        font-size: 14px;
        position: relative;
    }

    .action-button i {
        font-size: 12px;
        opacity: 0.7;
        transition: transform 0.2s;
    }

    .action-dropdown.open .action-button i {
        transform: rotate(180deg);
    }

    body.dark-mode .action-button {
        border-color: #444;
    }

    .action-button:hover {
        background-color: rgba(0, 0, 0, 0.05);
        border-color: rgba(0, 0, 0, 0.2);
    }

    body.dark-mode .action-button:hover {
        background-color: rgba(255, 255, 255, 0.05);
        border-color: rgba(255, 255, 255, 0.2);
    }

    .action-menu {
        display: none;
        position: fixed;
        z-index: 9999;
        min-width: 180px;
        padding: 4px 0;
        margin-top: 4px;
        background-color: #ffffff;
        border: 1px solid rgba(0, 0, 0, 0.15);
        border-radius: 6px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        transform-origin: top right;
        overflow: visible;
        backdrop-filter: blur(8px);
        -webkit-backdrop-filter: blur(8px);
    }

    body.dark-mode .action-menu {
        background-color: #2d2d2d;
        border-color: rgba(255, 255, 255, 0.1);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.4);
    }

    body.dark-mode .action-menu {
        background-color: #2d2d2d;
        border-color: #444;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    .action-menu.show {
        display: block;
        animation: menuFadeIn 0.15s ease-out;
    }

    .action-menu.show {
        animation: menu-fade-in 0.15s ease-out;
    }
    
    /* Separate style block for keyframes */
</style>
<style>
    @@keyframes menu-fade-in {
        from {
            opacity: 0;
            transform: translateY(-8px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>
<style>

    .action-item {
        display: flex;
        align-items: center;
        width: 100%;
        padding: 10px 16px;
        text-decoration: none;
        color: inherit;
        text-align: left;
        background: none;
        border: none;
        cursor: pointer;
        font-size: 14px;
        gap: 8px;
        transition: all 0.2s;
        position: relative;
        z-index: 10000;
    }

    .action-item i {
        width: 16px;
        text-align: center;
        font-size: 14px;
    }

    .action-item:hover {
        background-color: rgba(0, 0, 0, 0.05);
        text-decoration: none;
        color: inherit;
        padding-left: 20px;
    }

    body.dark-mode .action-item:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }

    .action-item.delete-action {
        color: #dc3545;
        border-top: 1px solid rgba(0, 0, 0, 0.1);
        margin-top: 4px;
        padding-top: 12px;
    }

    body.dark-mode .action-item.delete-action {
        color: #ff4d4d;
        border-top-color: rgba(255, 255, 255, 0.1);
    }

    body.dark-mode .action-item.delete-action:hover {
        background-color: rgba(255, 77, 77, 0.1);
    }
</style>

<div class="file-list">
    <table class="file-table">
        <thead>
            <tr>
                <th class="col-select">ðŸ”˜</th>
                <th class="col-filename">File Name</th>
                <th class="col-size">Size</th>
                <th class="col-time">Upload Time</th>
                <th class="col-expiry">Expiry Time</th>
                <th class="col-server">Server Name</th>
                <th class="col-owner">Owner</th>
                <th class="col-preview">Preview</th>
                <th class="col-actions">Actions</th>
            </tr>
        </thead>
        <tbody>
    @if (Model.Count > 0)
    {
        int itemIndex = 0;

        @foreach (var file in Model)
        {
            var extension = System.IO.Path.GetExtension(file.FileName).ToLower();
            var isImage = extension == ".png" || extension == ".jpg" || extension == ".jpeg" || extension == ".gif" ||
            extension == ".bmp";
            var isAdmin = User.IsInRole(UserRoles.Admin);
            var canDelete = isAdmin || User.Identity?.Name == file.Owner;

            <tr class="fileRow">
                <td class="col-select">
                    <input type="checkbox" id="@("chk-file-" + itemIndex.ToString())"
                        onchange="showDownloadFilesButton()">
                </td>
                <td class="col-filename" id="@("selected-file-" + itemIndex.ToString())">
                    <div class="filename-content">
                        <i class="@GetFileIcon(extension)" aria-hidden="true"></i>
                        @file.FileName
                    </div>
                </td>
                <td class="col-size">@{
                    var size = file.FileSize;
                    string[] units = { "B", "KB", "MB", "GB", "TB" };
                    int unitIndex = 0;
                    while (size >= 1024 && unitIndex < units.Length - 1)
                    {
                        size /= 1024;
                        unitIndex++;
                    }
                    @($"{size:F2} {units[unitIndex]}")
                }</td>
                <td class="col-time" data-upload-time="@file.UploadTime.ToString("O")">
                    <span class="utc-time">@file.UploadTime.ToString("MMM dd, yyyy, HH:mm")</span>
                    <span class="local-time" style="display: none;"></span>
                </td>
                <td class="col-expiry">
                    @if (file.ExpiryTime.HasValue)
                    {
                        var timeLeft = file.ExpiryTime.Value - DateTime.UtcNow;
                        var expiryText = timeLeft.TotalSeconds < 0 ? "Expired" :
                            timeLeft.TotalDays > 1 ? $"{Math.Floor(timeLeft.TotalDays)} days left" :
                            timeLeft.TotalHours > 1 ? $"{Math.Floor(timeLeft.TotalHours)} hours left" :
                            timeLeft.TotalMinutes > 1 ? $"{Math.Floor(timeLeft.TotalMinutes)} minutes left" :
                            "Less than a minute left";
                        <span title="@file.ExpiryTime.Value.ToString("yyyy-MM-dd HH:mm:ss UTC")">@expiryText</span>
                    }
                    else
                    {
                        <span>Never</span>
                    }
                </td>
                <td class="col-server">@Environment.MachineName</td>
                <td class="col-owner">
                    @if (!string.IsNullOrEmpty(file.Owner))
                    {
                        <span>@file.Owner</span>
                    }
                    else
                    {
                        <span class="text-muted">-</span>
                    }
                </td>
                <td class="col-preview">
                    @if (isImage)
                    {
                        <div class="preview-cell">
                            <img src="@Url.Action("ViewFile", "File", new { filename = file.FileName })" alt="Image Preview"
                                class="preview-image" />
                        </div>
                    }
                    else
                    {
                        <span>N/A</span>
                    }
                </td>
                <td class="col-actions">
                    <div class="action-dropdown">
                        <button type="button" class="action-button" onclick="toggleActionMenu(this)">
                            Actions <i class="fas fa-chevron-down"></i>
                        </button>
                        <div class="action-menu">
                            <a href="@Url.Action("ViewFile", "File", new { filename = file.FileName })" target="_blank" 
                               class="action-item"
                               title="Open the file in a new browser tab to view or preview its contents">
                                <i class="fas fa-eye"></i> View File
                            </a>
                            <button onclick="copyChecksum('@file.FileName'); return false;" 
                               class="action-item"
                               title="Copy SHA-256 checksum to clipboard">
                                <i class="fas fa-fingerprint"></i> Copy Checksum
                            </button>
                            <a href="@Url.Action("DownloadFile", "File", new { filename = file.FileName })" 
                               class="action-item"
                               title="Download this file to your computer">
                                <i class="fas fa-cloud-download-alt"></i> Download
                            </a>
                            <a href="@Url.Action("PrintFile", "File", new { filename = file.FileName })" 
                               class="action-item" target="_blank"
                               title="Open the file in print mode">
                                <i class="fas fa-print"></i> Print
                            </a>
                            <button onclick="copyFile('@file.FileName'); return false;" 
                                    class="action-item"
                                    title="Create a copy of this file">
                                <i class="fas fa-copy"></i> Make Copy
                            </button>
                            <button onclick="showRenameDialog('@file.FileName'); return false;" 
                                    class="action-item"
                                    title="Rename this file">
                                <i class="fas fa-edit"></i> Rename
                            </button>
                            @if (canDelete)
                            {
                                <button onclick="deleteFile('@file.FileName'); return false;" 
                                        class="action-item delete-action"
                                        title="Permanently delete this file from the server">
                                    <i class="fas fa-trash-alt"></i> Delete
                                </button>
                            }
                        </div>
                    </div>
                </td>
            </tr>

            itemIndex++;
        }
    }
    else
    {
        <tr>
            <td colspan="9">
                <p class="empty-message">No files uploaded yet...</p>
            </td>
        </tr>
    }
        </tbody>
    </table>
</div>

<script>
    // Dynamically load scripts without document.write
    function loadScript(url, callback) {
        console.log(`Loading script: ${url}`);
        const script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = url;
        script.onload = () => {
            console.log(`Script loaded successfully: ${url}`);
            if (callback) callback();
        };
        script.onerror = (err) => {
            console.error(`Error loading script ${url}:`, err);
        };
        document.head.appendChild(script);
    }

    // Only initialize date formatting once all necessary scripts are loaded
    function initializeDateFormatting() {
        // console.log("Initializing date formatting...");
        
        // Check for moment.js
        if (typeof moment === 'undefined') {
            // console.log("moment.js not found, loading it now");
            // Load moment.js first
            loadScript('https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js', function() {
                // Then load moment-timezone
                loadScript('https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.43/moment-timezone-with-data.min.js', function() {
                    // console.log("Both moment.js scripts loaded, formatting dates");
                    // Format dates and ensure this runs even if other scripts interfere
                    setTimeout(formatUploadTimes, 100);
                });
            });
        } else {
            // console.log("moment.js already available");
            // Moment.js already available, format immediately
            setTimeout(formatUploadTimes, 100);
        }
    }

    // Format upload times to local timezone
    function formatUploadTimes() {
        // console.log("Formatting upload times...");
        document.querySelectorAll('[data-upload-time]').forEach(element => {
            const utcTime = element.dataset.uploadTime;
            const utcSpan = element.querySelector('.utc-time');
            const localSpan = element.querySelector('.local-time');
            
            try {
                // Try using moment.js if available
                if (typeof moment !== 'undefined') {
                    // console.log("Using moment.js for formatting");
                    const localTime = moment(utcTime).local();
                    const timeStr = localTime.format('MMM DD, YYYY, h:mm A');
                    const timezone = moment.tz.guess();
                    const timezoneAbbr = moment.tz(timezone).zoneAbbr();
                    
                    // Display date/time in AM/PM format with timezone
                    localSpan.innerHTML = `${timeStr} <small class="text-muted">${timezoneAbbr}</small>`;
                    
                    // Hide UTC time and show local time
                    utcSpan.style.display = 'none';
                    localSpan.style.display = '';
                } else {
                    console.log("Falling back to native Date methods");
                    // Fallback to native JS Date
                    const dateObj = new Date(utcTime);
                    const options = { 
                        year: 'numeric', 
                        month: 'short', 
                        day: '2-digit',
                        hour: '2-digit', 
                        minute: '2-digit',
                        hour12: true
                    };
                    const timeStr = dateObj.toLocaleString(navigator.language || 'en-US', options);
                    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
                    
                    localSpan.innerHTML = `${timeStr} <small class="text-muted">${timezone}</small>`;
                    
                    // Hide UTC time and show local time
                    utcSpan.style.display = 'none';
                    localSpan.style.display = '';
                }
            } catch (error) {
                console.error("Error formatting date:", error);
                // Keep showing the UTC time as fallback
                utcSpan.style.display = '';
                localSpan.style.display = 'none';
            }
        });
    }    // Close all menus when clicking outside
    document.addEventListener('click', function(event) {
        if (!event.target.closest('.action-dropdown')) {
            document.querySelectorAll('.action-dropdown.open').forEach(dropdown => {
                dropdown.classList.remove('open');
                dropdown.querySelector('.action-menu').classList.remove('show');
            });
        }
    });

    // Handle action menu toggling
    function toggleActionMenu(button) {
        const dropdown = button.closest('.action-dropdown');
        const menu = button.nextElementSibling;
        const isOpening = !menu.classList.contains('show');

        // Close all other menus first
        document.querySelectorAll('.action-dropdown.open').forEach(d => {
            if (d !== dropdown) {
                d.classList.remove('open');
                d.querySelector('.action-menu').classList.remove('show');
            }
        });
        
        // Toggle this menu
        dropdown.classList.toggle('open', isOpening);
        menu.classList.toggle('show', isOpening);
        
        if (isOpening) {
            const rect = button.getBoundingClientRect();
            menu.style.top = `${rect.bottom + 4}px`;
            menu.style.left = `${rect.right - menu.offsetWidth}px`;
            
            // Ensure menu stays within viewport
            const menuRect = menu.getBoundingClientRect();
            const viewportWidth = window.innerWidth;
            const viewportHeight = window.innerHeight;
            
            if (menuRect.right > viewportWidth) {
                menu.style.left = `${viewportWidth - menuRect.width - 8}px`;
            }
            if (menuRect.bottom > viewportHeight) {
                menu.style.top = `${rect.top - menuRect.height - 4}px`;
            }
        }
    }

    // Close action menus when clicking outside
    document.addEventListener('click', function(event) {
        if (!event.target.closest('.action-dropdown')) {
            document.querySelectorAll('.action-dropdown.open').forEach(dropdown => {
                dropdown.classList.remove('open');
                dropdown.querySelector('.action-menu').classList.remove('show');
            });
        }
    });

    // Initialize with our new loader function
    document.addEventListener('DOMContentLoaded', function() {
        console.log("DOM fully loaded, initializing date formatting");
        initializeDateFormatting();
        
        // Re-apply formatting after a short delay to handle any race conditions
        setTimeout(formatUploadTimes, 1500);
        
        // Update times periodically
        setInterval(formatUploadTimes, 60000); // Update every minute
    });
    
    // Also try to initialize immediately in case the DOMContentLoaded already fired
    if (document.readyState === 'loading') {
        console.log("Document still loading, waiting for DOMContentLoaded");
    } else {
        console.log("Document already loaded, initializing immediately");
        initializeDateFormatting();
    }
    
    // Rename file functionality
    function showRenameDialog(filename) {
        // Close any open action menus
        document.querySelectorAll('.action-dropdown.open').forEach(dropdown => {
            dropdown.classList.remove('open');
            dropdown.querySelector('.action-menu').classList.remove('show');
        });
        
        const extension = filename.substring(filename.lastIndexOf('.'));
        const filenameWithoutExt = filename.substring(0, filename.lastIndexOf('.'));
        
        // Create or update modal for rename
        let modal = document.getElementById('renameFileModal');
        if (!modal) {
            modal = document.createElement('div');
            modal.id = 'renameFileModal';
            modal.className = 'modal fade show';
            document.body.appendChild(modal);
        }
        
        // Create backdrop first (so it's behind the dialog)
        let backdrop = document.getElementById('modalBackdrop');
        if (!backdrop) {
            backdrop = document.createElement('div');
            backdrop.id = 'modalBackdrop';
            backdrop.className = 'modal-backdrop fade show';
            document.body.appendChild(backdrop);
        }
        
        // Then create the modal (so it's in front of backdrop)
        modal.innerHTML = `
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Rename File</h5>
                        <button type="button" class="close" onclick="closeRenameModal()">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="newFilename">New Filename:</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="newFilename" value="${filenameWithoutExt}">
                                <div class="input-group-append">
                                    <span class="input-group-text">${extension}</span>
                                </div>
                            </div>
                            <small class="form-text text-muted">Enter a new name for the file. The extension will remain the same.</small>
                            <div id="renameError" class="alert alert-danger mt-2" style="display: none;"></div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" onclick="closeRenameModal()">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="renameFile('${filename}', '${extension}')">Rename</button>
                    </div>
                </div>
            </div>
        `;
        
        // Show modal
        document.body.classList.add('modal-open');
        modal.style.display = 'block';
        
        // Focus on input
        setTimeout(() => {
            document.getElementById('newFilename').focus();
            document.getElementById('newFilename').select();
        }, 100);
    }
    
    function closeRenameModal() {
        const modal = document.getElementById('renameFileModal');
        const backdrop = document.getElementById('modalBackdrop');
        
        if (modal) {
            modal.style.display = 'none';
            modal.remove();
        }
        
        if (backdrop) {
            backdrop.remove();
        }
        
        document.body.classList.remove('modal-open');
    }
    
    function renameFile(oldFilename, extension) {
        const newFilenameInput = document.getElementById('newFilename');
        const newFilenameBase = newFilenameInput.value.trim();
        const renameError = document.getElementById('renameError');
        
        // Validate new filename
        if (!newFilenameBase) {
            renameError.textContent = 'New filename cannot be empty.';
            renameError.style.display = 'block';
            return;
        }
        
        // Check for invalid characters
        const invalidChars = /[\\/:*?"<>|]/;
        if (invalidChars.test(newFilenameBase)) {
            renameError.textContent = 'Filename cannot contain any of these characters: \\ / : * ? " < > |';
            renameError.style.display = 'block';
            return;
        }
        
        const newFilename = newFilenameBase + extension;
        
        // Reset error message
        renameError.style.display = 'none';
        
        // Create form data for POST request
        const formData = new FormData();
        formData.append('oldFilename', oldFilename);
        formData.append('newFilename', newFilename);
        
        // Show loading state
        const renameBtn = document.querySelector('#renameFileModal .btn-primary');
        const originalBtnText = renameBtn.textContent;
        renameBtn.disabled = true;
        renameBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Renaming...';
        
        // Send rename request
        fetch('/File/RenameFile', {
            method: 'POST',
            body: formData,
            credentials: 'include'
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || `Error: ${response.status}`);
                });
            }
            return response.json();
        })
        .then(data => {
            // Close modal
            closeRenameModal();
            
            // Show success notification briefly before refreshing
            showNotification('File renamed successfully', 'success');
            
            // Refresh the entire page after a short delay
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        })
        .catch(error => {
            console.error('Error renaming file:', error);
            renameError.textContent = error.message || 'An error occurred while renaming the file.';
            renameError.style.display = 'block';
            
            // Reset button state
            renameBtn.disabled = false;
            renameBtn.textContent = originalBtnText;
        });
    }
    
    function deleteFile(filename) {
        // Confirm deletion
        if (!confirm(`Are you sure you want to delete "${filename}"?`)) {
            return;
        }
        
        // Create form data for POST request
        const formData = new FormData();
        formData.append('filename', filename);
        
        // Show loading notification
        showNotification('Deleting file...', 'info');
        
        // Send delete request
        fetch('/File/DeleteFile', {
            method: 'POST',
            body: formData,
            credentials: 'include'
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || `Error: ${response.status}`);
                });
            }
            return response.text();
        })
        .then(() => {
            // Show success notification
            showNotification('File deleted successfully', 'success');
            
            // Refresh the entire page after a short delay
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        })
        .catch(error => {
            console.error('Error deleting file:', error);
            showNotification(error.message || 'An error occurred while deleting the file.', 'error');
        });
    }
    
    function copyFile(filename) {
        // Create form data for POST request
        const formData = new FormData();
        formData.append('filename', filename);
        
        // Show loading notification
        showNotification('Creating file copy...', 'info');
        
        // Send copy request
        fetch('/File/CopyFile', {
            method: 'POST',
            body: formData,
            credentials: 'include'
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || `Error: ${response.status}`);
                });
            }
            return response.json();
        })
        .then(data => {
            // Show success notification
            showNotification(data.message, 'success');
            
            // Refresh the entire page after a short delay
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        })
        .catch(error => {
            console.error('Error copying file:', error);
            showNotification(error.message || 'An error occurred while copying the file.', 'error');
        });
    }
    
    function copyChecksum(filename) {
        // Show loading notification
        showNotification('Fetching checksum...', 'info');
        
        // Fetch the checksum from the server
        fetch(`/File/Checksum?filename=${encodeURIComponent(filename)}`, {
            method: 'GET',
            credentials: 'include'
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || `Error: ${response.status}`);
                });
            }
            return response.json();
        })
        .then(data => {
            // Copy checksum to clipboard
            navigator.clipboard.writeText(data.checksum)
                .then(() => {
                    // Show success notification
                    showNotification(`SHA-256 checksum copied to clipboard`, 'success');
                })
                .catch(err => {
                    console.error('Error copying to clipboard:', err);
                    showNotification('Failed to copy checksum to clipboard', 'error');
                });
        })
        .catch(error => {
            console.error('Error fetching checksum:', error);
            showNotification(error.message || 'An error occurred while getting the file checksum.', 'error');
        });
    }
    
    function showNotification(message, type = 'info') {
        // Create notification element if it doesn't exist
        let notification = document.getElementById('notification');
        if (!notification) {
            notification = document.createElement('div');
            notification.id = 'notification';
            notification.className = 'notification';
            document.body.appendChild(notification);
        }
        
        // Set notification content and style
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'info-circle'}"></i>
                <span>${message}</span>
            </div>
        `;
        
        // Show notification
        notification.classList.add('show');
        
        // Hide after 3 seconds
        setTimeout(() => {
            notification.classList.remove('show');
        }, 3000);
    }
</script>

<!-- Add notification styles -->
<style>
    #renameFileModal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: block;
        z-index: 1050; /* Higher than backdrop */
        overflow-x: hidden;
        overflow-y: auto;
        outline: 0;
    }
    
    #modalBackdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1040; /* Lower than modal */
    }
    
    #renameFileModal .modal-dialog {
        max-width: 500px;
        margin: 1.75rem auto;
        position: relative;
        z-index: 1051; /* Higher than modal container */
    }
    
    #renameFileModal .modal-content {
        border-radius: 0.3rem;
        background-color: #fff;
        color: #212529;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.5);
    }
    
    body.dark-mode #renameFileModal .modal-content {
        background-color: #343a40;
        color: #f8f9fa;
        border-color: #495057;
    }
    
    /* Ensure input group displays on same line */
    .input-group {
        display: flex;
        flex-wrap: nowrap;
    }
    
    .input-group-append {
        display: flex;
        margin-left: -1px;
    }
    
    .input-group-text {
        display: flex;
        align-items: center;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #495057;
        text-align: center;
        white-space: nowrap;
        background-color: #e9ecef;
        border: 1px solid #ced4da;
        border-radius: 0 0.25rem 0.25rem 0;
    }
    
    #renameFileModal .modal-header {
        border-bottom: 1px solid #dee2e6;
        padding: 1rem;
    }
    
    body.dark-mode #renameFileModal .modal-header {
        border-bottom-color: #495057;
    }
    
    #renameFileModal .modal-body {
        padding: 1rem;
    }
    
    #renameFileModal .modal-footer {
        border-top: 1px solid #dee2e6;
        padding: 1rem;
    }
    
    body.dark-mode #renameFileModal .modal-footer {
        border-top-color: #495057;
    }
    
    #renameFileModal .form-control {
        display: block;
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
    }
    
    body.dark-mode #renameFileModal .form-control {
        background-color: #495057;
        border-color: #6c757d;
        color: #f8f9fa;
    }
    
    body.dark-mode #renameFileModal .input-group-text {
        background-color: #6c757d;
        border-color: #6c757d;
        color: #f8f9fa;
    }
    
    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 4px;
        background-color: #f8f9fa;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        z-index: 9999;
        opacity: 0;
        transform: translateY(-20px);
        transition: opacity 0.3s, transform 0.3s;
    }
    
    .notification.show {
        opacity: 1;
        transform: translateY(0);
    }
    
    .notification-content {
        display: flex;
        align-items: center;
    }
    
    .notification-content i {
        margin-right: 10px;
    }
    
    .notification-success {
        background-color: #d4edda;
        border-left: 4px solid #28a745;
        color: #155724;
    }
    
    .notification-info {
        background-color: #d1ecf1;
        border-left: 4px solid #17a2b8;
        color: #0c5460;
    }
    
    .notification-warning {
        background-color: #fff3cd;
        border-left: 4px solid #ffc107;
        color: #856404;
    }
    
    .notification-error {
        background-color: #f8d7da;
        border-left: 4px solid #dc3545;
        color: #721c24;
    }
    
    body.dark-mode .notification {
        background-color: #343a40;
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    }
    
    body.dark-mode .notification-success {
        background-color: #1e4a30;
        color: #d4edda;
    }
    
    body.dark-mode .notification-info {
        background-color: #1a4957;
        color: #d1ecf1;
    }
    
    body.dark-mode .notification-warning {
        background-color: #533f03;
        color: #fff3cd;
    }
    
    body.dark-mode .notification-error {
        background-color: #501217;
        color: #f8d7da;
    }
</style>