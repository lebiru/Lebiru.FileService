@model Dictionary<string, string>

@{
    ViewData["Title"] = "Environment Variables";
    Layout = "_Layout"; // Adjust based on your application layout
}

<!DOCTYPE html>
<html>

<head>
    <title>Environment Variables</title>
    <style>
        body {
            background-color: white;
            color: black;
        }

        /* Dark Mode */
        body.dark-mode {
            background-color: #121212;
            color: white;
        }

        .table-container,
        .settings-container {
            background-color: inherit;
            color: inherit;
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .category-tabs {
            margin-bottom: 20px;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
        }

        .tab-button {
            background: none;
            border: none;
            padding: 8px 16px;
            margin-right: 8px;
            cursor: pointer;
            border-radius: 4px;
            transition: all 0.2s;
            color: inherit;
        }

        .tab-button:hover {
            background-color: rgba(0,0,0,0.05);
        }

        .tab-button.active {
            background-color: #0d6efd;
            color: white;
        }

        .dark-mode .tab-button:hover {
            background-color: rgba(255,255,255,0.1);
        }

        .dark-mode .tab-button.active {
            background-color: #0d6efd;
        }

        table {
            border-collapse: separate;
            border-spacing: 0;
            width: 100%;
            background: transparent;
            border-radius: 8px;
            overflow: hidden;
        }

        th,
        td {
            text-align: left;
            padding: 12px 16px;
            border-bottom: 1px solid rgba(0,0,0,0.1);
        }

        .dark-mode th,
        .dark-mode td {
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        th {
            background-color: rgba(0,0,0,0.02);
            font-weight: 600;
        }

        .dark-mode th {
            background-color: rgba(255,255,255,0.05);
        }

        .setting-name {
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .value-cell {
            font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
            font-size: 0.9em;
            max-width: 500px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .description-cell {
            font-size: 0.9em;
            color: #666;
            line-height: 1.4;
        }

        .dark-mode .description-cell {
            color: #aaa;
        }

        .badge {
            font-size: 0.7em;
            padding: 2px 6px;
            border-radius: 12px;
            font-weight: 500;
        }

        .app-badge {
            background-color: #0d6efd;
            color: white;
        }

        .dark-mode .app-badge {
            background-color: #0d6efd;
        }

        tr:hover td {
            background-color: rgba(0,0,0,0.02);
        }

        .dark-mode tr:hover td {
            background-color: rgba(255,255,255,0.02);
        }


        .empty-message {
            text-align: center;
            color: grey;
        }
    </style>
</head>

<body class="@((ViewBag.IsDarkMode ? "dark-mode" : ""))">
    <h2>Application Configuration</h2>

    <div class="table-container">
        <div class="category-tabs">
            <button class="tab-button active" onclick="showCategory('all')">All</button>
            <button class="tab-button" onclick="showCategory('app')">Application</button>
            <button class="tab-button" onclick="showCategory('aspnet')">ASP.NET Core</button>
            <button class="tab-button" onclick="showCategory('otel')">OpenTelemetry</button>
            <button class="tab-button" onclick="showCategory('other')">Other</button>
        </div>

        <table>
            <thead>
                <tr>
                    <th style="width: 25%">Setting</th>
                    <th style="width: 25%">Value</th>
                    <th style="width: 50%">Description</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Count > 0)
                {
                    @foreach (var envVar in Model)
                    {
                        string category = "other";
                        string description = "";
                        
                        // Try to get exact match first
                        if (ViewBag.Descriptions.ContainsKey(envVar.Key))
                        {
                            description = ViewBag.Descriptions[envVar.Key];
                        }
                        else
                        {
                            // Try to match by prefix
                            foreach (var desc in ViewBag.Descriptions)
                            {
                                if (desc.Key.EndsWith("_") && envVar.Key.StartsWith(desc.Key))
                                {
                                    description = desc.Value;
                                    break;
                                }
                            }
                        }
                        if (envVar.Key.StartsWith("FileService:", StringComparison.OrdinalIgnoreCase) ||
                            envVar.Key.StartsWith("Application:", StringComparison.OrdinalIgnoreCase))
                        {
                            category = "app";
                        }
                        else if (envVar.Key.StartsWith("ASPNETCORE_", StringComparison.OrdinalIgnoreCase))
                        {
                            category = "aspnet";
                        }
                        else if (envVar.Key.StartsWith("OTEL_", StringComparison.OrdinalIgnoreCase))
                        {
                            category = "otel";
                        }

                        <tr class="config-row @category-config">
                            <td>
                                <div class="setting-name" title="@envVar.Key">
                                    @{
                                        // Format the key to be more readable
                                        var displayKey = envVar.Key
                                            .Replace("ASPNETCORE_", "")
                                            .Replace("FileService:", "")
                                            .Replace("Application:", "")
                                            .Replace("OTEL_", "")
                                            .Replace('_', ' ');
                                    }
                                    @displayKey
                                    @if (envVar.Key.StartsWith("FileService:") || envVar.Key.StartsWith("Application:"))
                                    {
                                        <span class="badge app-badge">App Setting</span>
                                    }
                                </div>
                            </td>
                            <td><div class="value-cell" title="@envVar.Value">@envVar.Value</div></td>
                            <td><div class="description-cell">@description</div></td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="2" style="text-align: center;">No configuration variables found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <script>
        function showCategory(category) {
            // Update active tab
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active');
                if (button.textContent.toLowerCase().includes(category)) {
                    button.classList.add('active');
                }
            });

            // Show/hide rows
            document.querySelectorAll('.config-row').forEach(row => {
                if (category === 'all') {
                    row.style.display = '';
                } else {
                    row.style.display = row.classList.contains(category + '-config') ? '' : 'none';
                }
            });
        }
    </script>

    <!-- Settings Section -->
    <div class="settings-container" style="margin-top: 20px;">
        <h2>Settings</h2>
        <div>
            <label for="darkModeToggle">Dark Mode:</label>
            <input type="checkbox" id="darkModeToggle" @if (ViewBag.IsDarkMode)
            {
                <text>checked</text>
            }
            onchange="toggleDarkMode(this.checked)" />
        </div>
    </div>

    <script>
        function toggleDarkMode(enable) {
            fetch('/Config/ToggleDarkMode', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `enableDarkMode=${enable}`
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Reload the page to apply the theme
                        window.location.reload();
                    } else {
                        alert("Failed to update Dark Mode setting.");
                    }
                })
                .catch(error => console.error("Error toggling Dark Mode:", error));
        }
    </script>
</body>

</html>